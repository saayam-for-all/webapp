import { AndroidSetupResult, Options, OtherInfo, Platform, SdkBinary, SetupConfigs } from './interfaces';
export declare class AndroidSetup {
    sdkRoot: string;
    javaHome: string;
    options: Options;
    rootDir: string;
    platform: Platform;
    otherInfo: OtherInfo;
    constructor(options?: Options, rootDir?: string);
    run(): Promise<AndroidSetupResult | boolean>;
    showOptionsHelp(unknownOptions: string[]): void;
    loadEnvFromDotEnv(): void;
    isJavaHomeEnvSet(): boolean | null;
    javaHomeNotFoundInstructions(): void;
    getJavaHomeFromUser(): Promise<string>;
    getSdkRootFromUser(): Promise<string>;
    getConfigFromOptions(options: {
        [key: string]: string | string[] | boolean;
    }): SetupConfigs;
    getSetupConfigs(options: Options): Promise<SetupConfigs>;
    askToSetupAndroid(message: string): Promise<boolean>;
    checkBinariesPresent(binaries: SdkBinary[]): SdkBinary[];
    checkBinariesWorking(binaries: SdkBinary[]): SdkBinary[];
    verifyAvdPresent(): boolean;
    verifyAdbRunning(): void;
    verifySetup(setupConfigs: SetupConfigs): string[];
    setupAndroid(setupConfigs: SetupConfigs, missingRequirements: string[]): Promise<boolean>;
    verifyAndSetupBrowsers(browsersConfig: SetupConfigs['browsers']): Promise<boolean>;
    postSetupInstructions(result: boolean, setupConfigs: SetupConfigs): void;
    envSetInstructions(sdkRootEnv: string): void;
    envSetHelp(): void;
}
//# sourceMappingURL=androidSetup.d.ts.map