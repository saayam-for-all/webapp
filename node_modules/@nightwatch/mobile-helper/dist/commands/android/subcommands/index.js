"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AndroidSubcommand = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const dotenv = __importStar(require("dotenv"));
const path_1 = __importDefault(require("path"));
const logger_1 = __importDefault(require("../../../logger"));
const utils_1 = require("../../../utils");
const constants_1 = require("../constants");
const common_1 = require("../utils/common");
const help_1 = require("./help");
const connect_1 = require("./connect");
const help_2 = require("./help");
const install_1 = require("./install");
const list_1 = require("./list");
const uninstall_1 = require("./uninstall");
class AndroidSubcommand {
    sdkRoot;
    options;
    subcommand;
    rootDir;
    platform;
    androidHomeInGlobalEnv;
    constructor(subcommand, options, rootDir = process.cwd()) {
        this.sdkRoot = '';
        this.options = options;
        this.subcommand = subcommand;
        this.rootDir = rootDir;
        this.platform = (0, utils_1.getPlatformName)();
        this.androidHomeInGlobalEnv = false;
    }
    async run() {
        if (!Object.keys(constants_1.AVAILABLE_SUBCOMMANDS).includes(this.subcommand)) {
            logger_1.default.log(`${ansi_colors_1.default.red(`unknown subcommand passed: ${this.subcommand}`)}\n`);
            logger_1.default.log((0, help_1.getSubcommandHelp)());
            logger_1.default.log(`For individual subcommand help, run: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper android SUBCOMMAND --help')}`);
            logger_1.default.log(`For complete Android help, run: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper android --help')}\n`);
            return false;
        }
        if (this.options.help) {
            (0, help_2.showHelp)(this.subcommand);
            return true;
        }
        this.loadEnvFromDotEnv();
        const javaInstalled = (0, common_1.checkJavaInstallation)(this.rootDir);
        if (!javaInstalled) {
            return false;
        }
        const sdkRootEnv = (0, common_1.getSdkRootFromEnv)(this.rootDir, this.androidHomeInGlobalEnv);
        if (!sdkRootEnv) {
            logger_1.default.log(`Run: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper android --standalone')} to fix this issue.`);
            logger_1.default.log(`(Remove the ${ansi_colors_1.default.gray('--standalone')} flag from the above command if using the tool for testing.)\n`);
            return false;
        }
        this.sdkRoot = sdkRootEnv;
        return await this.executeSubcommand();
    }
    loadEnvFromDotEnv() {
        this.androidHomeInGlobalEnv = 'ANDROID_HOME' in process.env;
        dotenv.config({ path: path_1.default.join(this.rootDir, '.env') });
    }
    async executeSubcommand() {
        if (this.subcommand === 'connect') {
            return await (0, connect_1.connect)(this.options, this.sdkRoot, this.platform);
        }
        else if (this.subcommand === 'install') {
            return await (0, install_1.install)(this.options, this.sdkRoot, this.platform);
        }
        else if (this.subcommand === 'list') {
            return await (0, list_1.list)(this.options, this.sdkRoot, this.platform);
        }
        else if (this.subcommand === 'uninstall') {
            return await (0, uninstall_1.uninstall)(this.options, this.sdkRoot, this.platform);
        }
        return false;
    }
}
exports.AndroidSubcommand = AndroidSubcommand;
