"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectWirelessAdb = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const inquirer_1 = __importDefault(require("inquirer"));
const logger_1 = __importDefault(require("../../../../logger"));
const utils_1 = require("../../../../utils");
const common_1 = require("../../utils/common");
const sdk_1 = require("../../utils/sdk");
async function connectWirelessAdb(sdkRoot, platform) {
    try {
        const adbLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'adb', true);
        if (adbLocation === '') {
            logger_1.default.log(`  ${ansi_colors_1.default.red((0, utils_1.symbols)().fail)} ${ansi_colors_1.default.cyan('adb')} binary not found.\n`);
            logger_1.default.log(`Run: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper android --mode real --standalone')} to setup missing requirements.`);
            logger_1.default.log(`(Remove the ${ansi_colors_1.default.gray('--standalone')} flag from the above command if setting up for testing.)\n`);
            return false;
        }
        logger_1.default.log(`${ansi_colors_1.default.yellow('\nNote: Wireless debugging connection is only supported in Android 11 and above.\n')}`);
        logger_1.default.log(ansi_colors_1.default.bold('Follow the below steps to connect to your device wirelessly:\n'));
        logger_1.default.log('  1. Connect your device to the same network as your computer.');
        logger_1.default.log(`     ${ansi_colors_1.default.grey('You may connect your device to your computer\'s hotspot')}\n`);
        logger_1.default.log('  2. Enable developer options on your device by going to:');
        logger_1.default.log(`     ${ansi_colors_1.default.cyan('Settings > About phone > Build number')}`);
        logger_1.default.log(`     and tapping the ${ansi_colors_1.default.bold('Build number')} 7 times until you see the message: ${ansi_colors_1.default.bold('You are now a developer!')}\n`);
        logger_1.default.log(`     ${ansi_colors_1.default.grey('For more info, see: https://developer.android.com/studio/debug/dev-options#enable')}\n`);
        logger_1.default.log(`  3. Enable ${ansi_colors_1.default.bold('Wireless debugging')} on your device by going to:`);
        logger_1.default.log(`     ${ansi_colors_1.default.cyan('Settings > Developer options > Wireless debugging')}`);
        logger_1.default.log(`     or, search for ${ansi_colors_1.default.bold('wireless debugging')} on your device's Settings app.\n`);
        logger_1.default.log('  4. Find the IP address and port number of your device on the Wireless debugging screen');
        logger_1.default.log(`     ${ansi_colors_1.default.grey('IP address and port number are separated by \':\' in the format <ip_address>:<port>')}`);
        logger_1.default.log(`     ${ansi_colors_1.default.grey('where IP address comes before \':\' and port number comes after \':\'')}\n`);
        const deviceIPAnswer = await inquirer_1.default.prompt({
            type: 'input',
            name: 'deviceIP',
            message: 'Enter the IP address of your device:'
        });
        const deviceIP = deviceIPAnswer.deviceIP;
        const portAnswer = await inquirer_1.default.prompt({
            type: 'input',
            name: 'port',
            message: 'Enter the port number:'
        });
        const port = portAnswer.port;
        // Run the connect command using ip address and port number provided. If the device is previously
        // paired, then connection will succeed and we don't require to pair again. If not, then prompt
        // user for pairing details. Pair the device and then proceed to connect.
        let connectionStatus = (0, sdk_1.execBinarySync)(adbLocation, 'adb', platform, `connect ${deviceIP}:${port}`);
        if (connectionStatus?.includes('connected')) {
            logger_1.default.log('\n' + ansi_colors_1.default.green('Connected successfully!\n'));
            return true;
        }
        logger_1.default.log();
        logger_1.default.log('  5. Now, find your device\'s pairing code and pairing port number by going to:');
        logger_1.default.log(`     ${ansi_colors_1.default.cyan('Wireless debugging > Pair device with pairing code')}`);
        logger_1.default.log(`     Here, you will find a pairing code and an IP address and port combination ${ansi_colors_1.default.grey('(in the format <ip_address>:<port>)')}`);
        logger_1.default.log('     The port number associated with the IP address is the required pairing port number.\n');
        const pairingCodeAnswer = await inquirer_1.default.prompt({
            type: 'input',
            name: 'pairingCode',
            message: 'Enter the pairing code displayed on your device:'
        });
        const pairingCode = pairingCodeAnswer.pairingCode;
        const pairingPortAnswer = await inquirer_1.default.prompt({
            type: 'input',
            name: 'pairingPort',
            message: 'Enter the pairing port number displayed on your device:'
        });
        const pairingPort = pairingPortAnswer.pairingPort;
        logger_1.default.log();
        logger_1.default.log('Pairing with your device...');
        const pairing = (0, sdk_1.execBinarySync)(adbLocation, 'adb', platform, `pair ${deviceIP}:${pairingPort} ${pairingCode}`);
        if (pairing) {
            logger_1.default.log(ansi_colors_1.default.green('Pairing successful!\n'));
            logger_1.default.log('Connecting to your device...');
        }
        else {
            logger_1.default.log(`\n${ansi_colors_1.default.red('Pairing failed!')} Please try again.\n`);
            return false;
        }
        connectionStatus = (0, sdk_1.execBinarySync)(adbLocation, 'adb', platform, `connect ${deviceIP}:${port}`);
        if (!connectionStatus?.includes('connected')) {
            if (connectionStatus) {
                logger_1.default.log(ansi_colors_1.default.red(`  ${(0, utils_1.symbols)().fail} Failed to connect: ${connectionStatus}`), 'Please try again.\n');
            }
            else {
                logger_1.default.log(`\n${ansi_colors_1.default.red('Failed to connect!')} Please try again.\n`);
            }
            return false;
        }
        logger_1.default.log(ansi_colors_1.default.green('Connected successfully!\n'));
        return true;
    }
    catch (error) {
        logger_1.default.log(ansi_colors_1.default.red('Error occurred while connecting to device wirelessly.'));
        console.error(error);
        return false;
    }
}
exports.connectWirelessAdb = connectWirelessAdb;
