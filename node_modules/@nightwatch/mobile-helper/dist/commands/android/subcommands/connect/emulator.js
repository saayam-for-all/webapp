"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectAVD = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const inquirer_1 = __importDefault(require("inquirer"));
const logger_1 = __importDefault(require("../../../../logger"));
const common_1 = require("../../utils/common");
const sdk_1 = require("../../utils/sdk");
const common_2 = require("../common");
async function connectAVD(options, sdkRoot, platform) {
    try {
        const avdmanagerLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'avdmanager', true);
        if (avdmanagerLocation === '') {
            (0, common_2.showMissingBinaryHelp)('avdmanager');
            return false;
        }
        const emulatorLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'emulator', true);
        if (emulatorLocation === '') {
            (0, common_2.showMissingBinaryHelp)('emulator');
            return false;
        }
        const installedAvds = (0, sdk_1.execBinarySync)(avdmanagerLocation, 'avdmanager', platform, 'list avd -c');
        if (installedAvds === null) {
            logger_1.default.log(`${ansi_colors_1.default.red('\nFailed to fetch installed AVDs.')} Please try again.\n`);
            return false;
        }
        else if (installedAvds === '') {
            logger_1.default.log(`${ansi_colors_1.default.yellow('No installed AVD found.')}\n`);
            logger_1.default.log('To see the list of installed AVDs, run the following command:');
            logger_1.default.log(ansi_colors_1.default.cyan('  npx @nightwatch/mobile-helper android list --avd\n'));
            return false;
        }
        const installedAVDList = installedAvds.split('\n').filter(avd => avd !== '');
        let userSuppliedAVD = '';
        if (typeof options.avd === 'string') {
            userSuppliedAVD = options.avd;
            if (!installedAVDList.includes(userSuppliedAVD)) {
                logger_1.default.log(ansi_colors_1.default.yellow(`AVD '${userSuppliedAVD}' not found!\n`));
                userSuppliedAVD = '';
            }
        }
        else if (Array.isArray(options.avd)) {
            logger_1.default.log(ansi_colors_1.default.yellow('Only one AVD can be connected at a time.\n'));
        }
        if (!userSuppliedAVD) {
            const avdAnswer = await inquirer_1.default.prompt({
                type: 'list',
                name: 'avdName',
                message: 'Select the AVD to connect:',
                choices: installedAVDList
            });
            userSuppliedAVD = avdAnswer.avdName;
        }
        logger_1.default.log();
        logger_1.default.log(`Connecting to AVD: ${ansi_colors_1.default.cyan(userSuppliedAVD)}\n`);
        return (0, sdk_1.spawnCommandSync)(emulatorLocation, 'emulator', platform, [`@${userSuppliedAVD}`]);
    }
    catch (error) {
        logger_1.default.log(ansi_colors_1.default.red('\nError occurred while launching AVD.'));
        console.error(error);
        return false;
    }
}
exports.connectAVD = connectAVD;
