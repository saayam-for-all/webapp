"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installSystemImage = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const inquirer_1 = __importDefault(require("inquirer"));
const logger_1 = __importDefault(require("../../../../logger"));
const common_1 = require("../../utils/common");
const sdk_1 = require("../../utils/sdk");
const apiLevelNames_json_1 = __importDefault(require("../apiLevelNames.json"));
const common_2 = require("../common");
async function installSystemImage(sdkRoot, platform) {
    try {
        const sdkmanagerLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'sdkmanager', true);
        if (!sdkmanagerLocation) {
            (0, common_2.showMissingBinaryHelp)('sdkmanager');
            return false;
        }
        const stdout = (0, sdk_1.execBinarySync)(sdkmanagerLocation, 'sdkmanager', platform, '--list');
        if (!stdout) {
            logger_1.default.log(`${ansi_colors_1.default.red('\nFailed to fetch available system images!')} Please try again.\n`);
            return false;
        }
        // `sdkmanager --list` output have repetitive system image names in different sections
        // (Installed packages, Available packages, Available updates, etc.)
        //
        // Parse the output and store the system image names in a Set to avoid duplicates.
        const availableImageNames = new Set();
        // Before parsing and removing duplicates, sort the system images
        // to get them in increasing order of API level.
        const lines = stdout.split('\n').sort();
        lines.forEach(line => {
            if (!line.includes('system-images;')) {
                return;
            }
            const imageName = line.split('|')[0].trim();
            availableImageNames.add(imageName);
        });
        // System images are represented in the format: system-images;android-<api-level>;<type>;<arch>
        // Group all the system image types by API level. Group all the architectures by system image type.
        const availableSystemImages = {};
        availableImageNames.forEach(imageName => {
            if (!imageName.includes('system-image')) {
                return;
            }
            const imageSplit = imageName.split(';');
            const apiLevel = imageSplit[1];
            const type = imageSplit[2];
            const arch = imageSplit[3];
            availableSystemImages[apiLevel] ||= [];
            const imageType = availableSystemImages[apiLevel].find(image => image.type === type);
            if (!imageType) {
                availableSystemImages[apiLevel].push({
                    type: type,
                    archs: [arch]
                });
            }
            else {
                imageType.archs.push(arch);
            }
        });
        // We've got the available system images grouped by API level.
        // Now, prompt the user to select the API level, system image type, and architecture.
        const apiLevelChoices = Object.keys(availableSystemImages).map(apiLevel => {
            let name = apiLevel;
            if (apiLevelNames_json_1.default[apiLevel]) {
                name = `${apiLevel}: ${apiLevelNames_json_1.default[apiLevel]}`;
            }
            return { name, value: apiLevel };
        });
        const apiLevelAnswer = await inquirer_1.default.prompt({
            type: 'list',
            name: 'apiLevel',
            message: 'Select the API level for system image:',
            choices: apiLevelChoices
        });
        const apiLevel = apiLevelAnswer.apiLevel;
        const systemImageTypeAnswer = await inquirer_1.default.prompt({
            type: 'list',
            name: 'systemImageType',
            message: `Select the system image type for ${ansi_colors_1.default.cyan(apiLevel)}:`,
            choices: availableSystemImages[apiLevel].map(image => image.type)
        });
        const type = systemImageTypeAnswer.systemImageType;
        const systemImageArchAnswer = await inquirer_1.default.prompt({
            type: 'list',
            name: 'systemImageArch',
            message: 'Select the architecture for the system image:',
            choices: availableSystemImages[apiLevel].find(image => image.type === type)?.archs
        });
        const arch = systemImageArchAnswer.systemImageArch;
        const systemImageName = `system-images;${apiLevel};${type};${arch}`;
        logger_1.default.log();
        logger_1.default.log(`Installing system image: ${ansi_colors_1.default.cyan(systemImageName)}\n`);
        const installationStatus = (0, sdk_1.spawnCommandSync)(sdkmanagerLocation, 'sdkmanager', platform, [systemImageName]);
        if (installationStatus) {
            logger_1.default.log(ansi_colors_1.default.green('\nSystem image installed successfully!\n'));
            return true;
        }
        logger_1.default.log(ansi_colors_1.default.red('\nSomething went wrong while installing system image.\n'));
        logger_1.default.log(`To verify if the system image was installed, run: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper android.sdkmanager --list_installed')}`);
        logger_1.default.log('If the system image is not found listed, please try installing again.\n');
        return false;
    }
    catch (error) {
        logger_1.default.log(ansi_colors_1.default.red('\nError occurred while installing system image.'));
        console.error(error);
        return false;
    }
}
exports.installSystemImage = installSystemImage;
