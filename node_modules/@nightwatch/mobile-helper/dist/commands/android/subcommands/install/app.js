"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installApp = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const fs_1 = require("fs");
const inquirer_1 = __importDefault(require("inquirer"));
const path_1 = __importDefault(require("path"));
const logger_1 = __importDefault(require("../../../../logger"));
const appium_adb_1 = __importDefault(require("../../utils/appium-adb"));
const common_1 = require("../../utils/common");
const sdk_1 = require("../../utils/sdk");
const common_2 = require("../common");
const untildify_1 = __importDefault(require("untildify"));
async function installApp(options, sdkRoot, platform) {
    try {
        const adbLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'adb', true);
        if (!adbLocation) {
            (0, common_2.showMissingBinaryHelp)('adb');
            return false;
        }
        const adb = await appium_adb_1.default.createADB({ allowOfflineDevices: true });
        const devices = await adb.getConnectedDevices();
        if (!devices.length) {
            logger_1.default.log(`${ansi_colors_1.default.red('No device found running.')} Please connect a device to install the APK.`);
            logger_1.default.log(`Use ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper android connect')} to connect to a device.\n`);
            return true;
        }
        if (options.deviceId) {
            // If device id is passed then check if the id is valid. If not then prompt user to select a device.
            const deviceConnected = devices.find(device => device.udid === options.deviceId);
            if (!deviceConnected) {
                logger_1.default.log(ansi_colors_1.default.yellow(`No connected device found with deviceId '${options.deviceId}'.\n`));
                options.deviceId = '';
            }
        }
        if (!options.deviceId) {
            // if device id not found, or invalid device id is found, then prompt the user
            // to select a device from the list of running devices.
            const deviceAnswer = await inquirer_1.default.prompt({
                type: 'list',
                name: 'device',
                message: 'Select the device to install the APK:',
                choices: devices.map(device => device.udid)
            });
            options.deviceId = deviceAnswer.device;
        }
        if (!options.path) {
            // if path to APK is not provided, then prompt the user to enter the path.
            const apkPathAnswer = await inquirer_1.default.prompt({
                type: 'input',
                name: 'apkPath',
                message: 'Enter the path to the APK file:'
            });
            options.path = apkPathAnswer.apkPath;
        }
        logger_1.default.log();
        options.path = path_1.default.resolve(process.cwd(), (0, untildify_1.default)(options.path));
        if (!(0, fs_1.existsSync)(options.path)) {
            logger_1.default.log(`${ansi_colors_1.default.red('No APK file found at: ' + options.path)}\nPlease provide a valid path to the APK file.\n`);
            return false;
        }
        logger_1.default.log('Installing APK...');
        const installationStatus = await (0, sdk_1.execBinaryAsync)(adbLocation, 'adb', platform, `-s ${options.deviceId} install "${options.path}"`);
        if (installationStatus?.includes('Success')) {
            logger_1.default.log(ansi_colors_1.default.green('APK installed successfully!\n'));
            return true;
        }
        handleError(installationStatus);
        return false;
    }
    catch (err) {
        handleError(err);
        return false;
    }
}
exports.installApp = installApp;
const handleError = (consoleOutput) => {
    logger_1.default.log(ansi_colors_1.default.red('\nError while installing APK:'));
    let errorMessage = consoleOutput;
    if (consoleOutput.includes('INSTALL_FAILED_ALREADY_EXISTS') || consoleOutput.includes('INSTALL_FAILED_VERSION_DOWNGRADE')) {
        errorMessage = 'APK with the same package name already exists on the device.\n';
        errorMessage += ansi_colors_1.default.reset('\nPlease uninstall the app first from the device and then install again.\n');
        errorMessage += ansi_colors_1.default.reset(`To uninstall, use: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper android uninstall --app')}\n`);
    }
    else if (consoleOutput.includes('INSTALL_FAILED_OLDER_SDK')) {
        errorMessage = 'Target installation location (AVD/Real device) has older SDK version than the minimum requirement of the APK.\n';
    }
    logger_1.default.log(ansi_colors_1.default.red(errorMessage));
};
