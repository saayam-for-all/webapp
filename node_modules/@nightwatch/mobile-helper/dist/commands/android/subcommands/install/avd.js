"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAvd = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const inquirer_1 = __importDefault(require("inquirer"));
const logger_1 = __importDefault(require("../../../../logger"));
const common_1 = require("../../utils/common");
const sdk_1 = require("../../utils/sdk");
const common_2 = require("../common");
const DEVICE_TYPES = [
    { name: 'Nexus', value: 'Nexus' },
    { name: 'Pixel', value: 'pixel' },
    { name: 'Wear OS', value: 'wear' },
    { name: 'Android TV', value: 'tv' },
    { name: 'Desktop', value: 'desktop' },
    { name: 'Others', value: 'Others' }
];
async function createAvd(sdkRoot, platform) {
    try {
        const avdmanagerLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'avdmanager', true);
        if (!avdmanagerLocation) {
            (0, common_2.showMissingBinaryHelp)('avdmanager');
            return false;
        }
        const sdkmanagerLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'sdkmanager', true);
        if (!sdkmanagerLocation) {
            (0, common_2.showMissingBinaryHelp)('sdkmanager');
            return false;
        }
        const avdNameAnswer = await inquirer_1.default.prompt({
            type: 'input',
            name: 'avdName',
            message: 'Enter a name for the AVD:'
        });
        const avdName = avdNameAnswer.avdName || 'my_avd';
        const installedSystemImages = await (0, common_2.getInstalledSystemImages)(sdkmanagerLocation, platform);
        if (!installedSystemImages) {
            return false;
        }
        if (!installedSystemImages.length) {
            logger_1.default.log(ansi_colors_1.default.red('\nNo installed system images were found!'));
            logger_1.default.log(`Run: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper android install --system-image')} to install a new system image.`);
            return false;
        }
        const systemImageAnswer = await inquirer_1.default.prompt({
            type: 'list',
            name: 'systemImage',
            message: 'Select the system image to use for AVD:',
            choices: installedSystemImages
        });
        const systemImage = systemImageAnswer.systemImage;
        const deviceTypeAnswer = await inquirer_1.default.prompt({
            type: 'list',
            name: 'deviceType',
            message: 'Select the device type for AVD:',
            choices: DEVICE_TYPES
        });
        const deviceType = deviceTypeAnswer.deviceType;
        let cmd = 'list devices -c';
        const availableDeviceProfiles = (0, sdk_1.execBinarySync)(avdmanagerLocation, 'avdmanager', platform, cmd);
        if (!availableDeviceProfiles) {
            logger_1.default.log(ansi_colors_1.default.red('\nSomething went wrong while retrieving available device profiles.'), 'Please try again.');
            return false;
        }
        const deviceTypeValues = DEVICE_TYPES.map(deviceType => deviceType.value);
        const matchingDeviceProfiles = availableDeviceProfiles
            .split('\n')
            .filter(line => line !== '')
            .filter(deviceProfile => {
            if (deviceType === 'Others') {
                return !deviceTypeValues.some(deviceTypeValue => deviceProfile.includes(deviceTypeValue));
            }
            else {
                return deviceProfile.includes(deviceType);
            }
        });
        if (!matchingDeviceProfiles.length) {
            logger_1.default.log(ansi_colors_1.default.red(`\nNo potential device profile found for device type "${deviceType}".`), 'Please try again.');
            return false;
        }
        const deviceAnswer = await inquirer_1.default.prompt({
            type: 'list',
            name: 'deviceProfile',
            message: 'Select the device profile for AVD:',
            choices: matchingDeviceProfiles
        });
        const deviceProfile = deviceAnswer.deviceProfile;
        logger_1.default.log();
        logger_1.default.log('Creating AVD...\n');
        cmd = `create avd -n '${avdName}' -k '${systemImage}' -d '${deviceProfile}'`;
        let createAVDStatus = false;
        try {
            createAVDStatus = await executeCreateAvdCommand(cmd, avdmanagerLocation, platform, avdName);
        }
        catch (err) {
            if (typeof err === 'string' && err.includes('already exists')) {
                // AVD with the same name already exists. Ask user if they want to overwrite it.
                logger_1.default.log(`\n${ansi_colors_1.default.yellow('AVD with the same name already exists!')}\n`);
                const overwriteAnswer = await inquirer_1.default.prompt({
                    type: 'confirm',
                    name: 'overwrite',
                    message: 'Overwrite the existing AVD?'
                });
                logger_1.default.log();
                if (overwriteAnswer.overwrite) {
                    cmd += ' --force';
                    createAVDStatus = await executeCreateAvdCommand(cmd, avdmanagerLocation, platform, avdName);
                }
            }
            else {
                handleError(err);
            }
        }
        return createAVDStatus;
    }
    catch (err) {
        handleError(err);
        return false;
    }
}
exports.createAvd = createAvd;
async function executeCreateAvdCommand(cmd, avdmanagerLocation, platform, avdName) {
    const output = await (0, sdk_1.execBinaryAsync)(avdmanagerLocation, 'avdmanager', platform, cmd);
    if (output?.includes('100% Fetch remote repository')) {
        logger_1.default.log(ansi_colors_1.default.green('AVD created successfully!\n'));
        logger_1.default.log(`Run ${ansi_colors_1.default.cyan(`npx @nightwatch/mobile-helper android connect --emulator --avd ${avdName}`)} to launch the AVD.\n`);
        return true;
    }
    logger_1.default.log(ansi_colors_1.default.red('Something went wrong while creating AVD!'));
    logger_1.default.log('Command output:', output);
    logger_1.default.log(`Please run ${ansi_colors_1.default.cyan(`npx @nightwatch/mobile-helper android connect --emulator --avd ${avdName}`)} to verify AVD creation.`);
    logger_1.default.log('If AVD does not launch, please try creating the AVD again.\n');
    return false;
}
function handleError(err) {
    logger_1.default.log(ansi_colors_1.default.red('\nError occurred while creating AVD!'));
    console.error(err);
}
