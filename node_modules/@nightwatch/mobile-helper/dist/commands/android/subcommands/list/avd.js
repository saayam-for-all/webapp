"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listInstalledAVDs = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const logger_1 = __importDefault(require("../../../../logger"));
const common_1 = require("../../utils/common");
const sdk_1 = require("../../utils/sdk");
const common_2 = require("../common");
async function listInstalledAVDs(sdkRoot, platform) {
    try {
        const avdmanagerLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'avdmanager', true);
        if (!avdmanagerLocation) {
            (0, common_2.showMissingBinaryHelp)('avdmanager');
            return false;
        }
        const installedAVDs = (0, sdk_1.execBinarySync)(avdmanagerLocation, 'avd', platform, 'list avd');
        if (!installedAVDs) {
            logger_1.default.log(`\n${ansi_colors_1.default.red('Failed to list installed AVDs!')} Please try again.`);
            return false;
        }
        if (installedAVDs.split('\n').length < 3) {
            logger_1.default.log(ansi_colors_1.default.red('No installed AVDs found!'));
        }
        else {
            logger_1.default.log(installedAVDs);
        }
        return true;
    }
    catch (err) {
        logger_1.default.log(ansi_colors_1.default.red('Error occurred while listing installed AVDs.'));
        console.error(err);
        return false;
    }
}
exports.listInstalledAVDs = listInstalledAVDs;
