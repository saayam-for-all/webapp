"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteSystemImage = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const inquirer_1 = __importDefault(require("inquirer"));
const logger_1 = __importDefault(require("../../../../logger"));
const common_1 = require("../../utils/common");
const sdk_1 = require("../../utils/sdk");
const common_2 = require("../common");
async function deleteSystemImage(sdkRoot, platform) {
    try {
        const sdkmanagerLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'sdkmanager', true);
        if (!sdkmanagerLocation) {
            (0, common_2.showMissingBinaryHelp)('sdkmanager');
            return false;
        }
        const installedSystemImages = await (0, common_2.getInstalledSystemImages)(sdkmanagerLocation, platform);
        if (!installedSystemImages) {
            return false;
        }
        if (!installedSystemImages.length) {
            logger_1.default.log(ansi_colors_1.default.yellow('No installed system images were found!\n'));
            return false;
        }
        const systemImageAnswer = await inquirer_1.default.prompt({
            type: 'list',
            name: 'systemImage',
            message: 'Select the system image to uninstall:',
            choices: installedSystemImages
        });
        const systemImage = systemImageAnswer.systemImage;
        logger_1.default.log();
        logger_1.default.log(`Uninstalling ${ansi_colors_1.default.cyan(systemImageAnswer.systemImage)}...\n`);
        const deleteStatus = (0, sdk_1.execBinarySync)(sdkmanagerLocation, 'sdkmanager', platform, `--uninstall '${systemImage}'`);
        if (deleteStatus?.includes('100% Fetch remote repository')) {
            logger_1.default.log(ansi_colors_1.default.green('System image uninstalled successfully!\n'));
            deleteObsoleteAVDs(sdkRoot, platform);
            return true;
        }
        logger_1.default.log(ansi_colors_1.default.red('\nSomething went wrong while uninstalling the system image.\n'));
        logger_1.default.log(`To verify if the system image was uninstalled, run: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper android.sdkmanager --list_installed')}`);
        logger_1.default.log('If the system image is found listed, please try uninstalling again.\n');
        return false;
    }
    catch (error) {
        logger_1.default.log(ansi_colors_1.default.red('\nError occurred while uninstalling system image.'));
        console.error(error);
        return false;
    }
}
exports.deleteSystemImage = deleteSystemImage;
/**
* Delete AVDs that can no longer be used due to missing system image.
*
* We don't throw an error if the AVD deletion fails, as the main aim of this subcommand
* is to uninstall system-image, which is already completed.
*/
async function deleteObsoleteAVDs(sdkRoot, platform) {
    const avdmanagerLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'avdmanager', true);
    if (!avdmanagerLocation) {
        return;
    }
    const avdList = (0, sdk_1.execBinarySync)(avdmanagerLocation, 'avdmanager', platform, 'list avd');
    if (!avdList) {
        return;
    }
    const obsoleteAVDs = avdList.split('The following Android Virtual Devices could not be loaded:')[1];
    if (obsoleteAVDs) {
        const obsoleteAVDNames = [];
        let avdMissingImageErrorCount = 0;
        obsoleteAVDs.split('\n').forEach(line => {
            if (line.includes('Name: ')) {
                const avdName = line.split(':')[1].trim();
                obsoleteAVDNames.push(avdName);
            }
            if (line.includes('Error: Missing system image')) {
                avdMissingImageErrorCount++;
            }
        });
        if (!obsoleteAVDNames.length || obsoleteAVDNames.length !== avdMissingImageErrorCount) {
            logger_1.default.log(ansi_colors_1.default.red('Note: Failed to fetch obsolete AVDs after deleting the system image.'));
            return;
        }
        logger_1.default.log(ansi_colors_1.default.yellow('The following AVDs can no longer be used due to missing system image:'));
        obsoleteAVDNames.forEach((avdName, idx) => {
            logger_1.default.log(`${idx + 1}. ${avdName}`);
        });
        logger_1.default.log();
        const deleteAnswer = await inquirer_1.default.prompt({
            type: 'confirm',
            name: 'delete',
            message: 'Do you want to delete these AVDs?'
        });
        if (!deleteAnswer.delete) {
            return;
        }
        logger_1.default.log();
        logger_1.default.log('Deleting obsolete AVDs...\n');
        obsoleteAVDNames.forEach(avdName => {
            const deleteStatus = (0, sdk_1.execBinarySync)(avdmanagerLocation, 'avdmanager', platform, `delete avd --name ${avdName}`);
            if (deleteStatus?.includes('deleted')) {
                logger_1.default.log(`${ansi_colors_1.default.green('Deleted:')} ${avdName}`);
                return;
            }
            logger_1.default.log(`${ansi_colors_1.default.red('Failed to delete:')} ${avdName}`);
        });
        logger_1.default.log();
    }
}
