"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteAvd = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const inquirer_1 = __importDefault(require("inquirer"));
const logger_1 = __importDefault(require("../../../../logger"));
const common_1 = require("../../utils/common");
const sdk_1 = require("../../utils/sdk");
const common_2 = require("../common");
async function deleteAvd(sdkRoot, platform) {
    try {
        const avdmanagerLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'avdmanager', true);
        if (!avdmanagerLocation) {
            (0, common_2.showMissingBinaryHelp)('avdmanager');
            return false;
        }
        const installedAvds = (0, sdk_1.execBinarySync)(avdmanagerLocation, 'avdmanager', platform, 'list avd -c');
        if (installedAvds === null) {
            logger_1.default.log(`${ansi_colors_1.default.red('\nFailed to fetch installed AVDs.')} Please try again.\n`);
            return false;
        }
        else if (installedAvds === '') {
            logger_1.default.log(`${ansi_colors_1.default.yellow('No installed AVD found.')}\n`);
            logger_1.default.log('To see the list of installed AVDs, run the following command:');
            logger_1.default.log(ansi_colors_1.default.cyan('  npx @nightwatch/mobile-helper android list --avd\n'));
            return false;
        }
        const avdAnswer = await inquirer_1.default.prompt({
            type: 'list',
            name: 'avdName',
            message: 'Select the AVD to delete:',
            choices: installedAvds.split('\n').filter(avd => avd !== '')
        });
        const avdName = avdAnswer.avdName;
        logger_1.default.log();
        logger_1.default.log(`Deleting ${ansi_colors_1.default.cyan(avdName)}...\n`);
        const deleteStatus = await (0, sdk_1.execBinaryAsync)(avdmanagerLocation, 'avdmanager', platform, `delete avd --name '${avdName}'`);
        if (deleteStatus?.includes('deleted')) {
            logger_1.default.log(ansi_colors_1.default.green('AVD deleted successfully!\n'));
            return true;
        }
        logger_1.default.log(ansi_colors_1.default.red('Something went wrong while deleting AVD.'));
        logger_1.default.log('Command output:', deleteStatus);
        logger_1.default.log(`To verify if the AVD was deleted, run: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper android list --avd')}`);
        logger_1.default.log('If the AVD is still present, try deleting it again.\n');
        return false;
    }
    catch (error) {
        logger_1.default.log(ansi_colors_1.default.red('\nError occurred while deleting AVD.'));
        console.error(error);
        return false;
    }
}
exports.deleteAvd = deleteAvd;
