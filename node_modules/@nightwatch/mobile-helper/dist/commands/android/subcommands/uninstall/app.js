"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uninstallApp = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const inquirer_1 = __importDefault(require("inquirer"));
const logger_1 = __importDefault(require("../../../../logger"));
const appium_adb_1 = __importDefault(require("../../utils/appium-adb"));
const common_1 = require("../../utils/common");
const sdk_1 = require("../../utils/sdk");
const common_2 = require("../common");
async function uninstallApp(options, sdkRoot, platform) {
    try {
        const adbLocation = (0, common_1.getBinaryLocation)(sdkRoot, platform, 'adb', true);
        if (!adbLocation) {
            (0, common_2.showMissingBinaryHelp)('adb');
            return false;
        }
        const adb = await appium_adb_1.default.createADB({ allowOfflineDevices: true });
        const devices = await adb.getConnectedDevices();
        if (!devices.length) {
            logger_1.default.log(`${ansi_colors_1.default.red('No device found running.')} Please connect the device to uninstall the app from.\n`);
            return true;
        }
        if (options.deviceId) {
            // If device id is passed then check if the id is valid. If not then prompt user to select a device.
            const deviceConnected = devices.find(device => device.udid === options.deviceId);
            if (!deviceConnected) {
                logger_1.default.log(ansi_colors_1.default.yellow(`No connected device found with deviceId '${options.deviceId}'.\n`));
                options.deviceId = '';
            }
        }
        else if (devices.length === 1) {
            options.deviceId = devices[0].udid;
        }
        if (!options.deviceId) {
            // if device id not found, or invalid device id is found, then prompt the user
            // to select a device from the list of running devices.
            const deviceAnswer = await inquirer_1.default.prompt({
                type: 'list',
                name: 'device',
                message: 'Select the device to uninstall the APK from:',
                choices: devices.map(device => device.udid)
            });
            options.deviceId = deviceAnswer.device;
        }
        const appNameAnswer = await inquirer_1.default.prompt({
            type: 'input',
            name: 'appName',
            message: `Name of the app to uninstall from device '${options.deviceId}':`
        });
        const appName = appNameAnswer.appName;
        const packageNames = (0, sdk_1.execBinarySync)(adbLocation, 'adb', platform, `-s ${options.deviceId} shell pm list packages '${appName}'`);
        if (!packageNames) {
            logger_1.default.log();
            logger_1.default.log(`${ansi_colors_1.default.red(`No package found with name '${appName}'!`)} Please try again.\n`);
            return false;
        }
        const packagesList = [];
        // Name of a package is in the format 'package:com.example.app'
        packageNames.split('\n').forEach(line => {
            if (line.includes('package:')) {
                packagesList.push(line.split(':')[1].trim());
            }
        });
        let packageName = packagesList[0];
        if (packagesList.length > 1) {
            const packageNameAnswer = await inquirer_1.default.prompt({
                type: 'list',
                name: 'packageName',
                message: 'Select the package you want to uninstall:',
                choices: packagesList
            });
            packageName = packageNameAnswer.packageName;
        }
        const uninstallationConfirmation = await inquirer_1.default.prompt({
            type: 'confirm',
            name: 'confirm',
            message: `Are you sure you want to uninstall ${ansi_colors_1.default.cyan(packageName)}`
        });
        logger_1.default.log();
        if (!uninstallationConfirmation.confirm) {
            logger_1.default.log('Uninstallation cancelled.\n');
            return false;
        }
        logger_1.default.log(`Uninstalling ${ansi_colors_1.default.cyan(packageName)}...\n`);
        const uninstallationStatus = await (0, sdk_1.execBinaryAsync)(adbLocation, 'adb', platform, `-s ${options.deviceId} uninstall ${packageName}`);
        if (uninstallationStatus?.includes('Success')) {
            logger_1.default.log(`${ansi_colors_1.default.green('App uninstalled successfully!')}\n`);
            return true;
        }
        logger_1.default.log(ansi_colors_1.default.red('Something went wrong while uninstalling app.'));
        logger_1.default.log('Command output:', uninstallationStatus);
        logger_1.default.log('Please check the output above and try again.');
        return false;
    }
    catch (error) {
        logger_1.default.log(ansi_colors_1.default.red('\nError occurred while uninstalling app.'));
        console.error(error);
        return false;
    }
}
exports.uninstallApp = uninstallApp;
