"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadSdkBuildTools = exports.getBuildToolsAvailableVersions = exports.spawnCommandSync = exports.execBinaryAsync = exports.execBinarySync = exports.installPackagesUsingSdkManager = exports.downloadAndSetupAndroidSdk = exports.getDefaultAndroidSdkRoot = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const os_1 = require("os");
const path_1 = __importDefault(require("path"));
const utils_1 = require("../../../utils");
const downloads_json_1 = __importDefault(require("../downloads.json"));
const common_1 = require("./common");
const getDefaultAndroidSdkRoot = (platform) => {
    if (platform === 'windows') {
        let basePath = process.env.LOCALAPPDATA;
        if (!basePath) {
            basePath = (0, os_1.homedir)();
        }
        return path_1.default.join(basePath, 'Android', 'sdk');
    }
    if (platform === 'linux') {
        return path_1.default.join((0, os_1.homedir)(), 'Android', 'Sdk');
    }
    return path_1.default.join((0, os_1.homedir)(), 'Library', 'Android', 'sdk');
};
exports.getDefaultAndroidSdkRoot = getDefaultAndroidSdkRoot;
const downloadAndSetupAndroidSdk = async (sdkRoot, platform) => {
    // make sure `cmdline-tools` folder is not present already
    const cmdline_tools = path_1.default.join(sdkRoot, 'cmdline-tools');
    const temp_cmdline_tools1 = path_1.default.join(sdkRoot, 'cmdline-tools-temp1');
    const temp_cmdline_tools2 = path_1.default.join(sdkRoot, 'cmdline-tools-temp2');
    const cmdline_tools_latest = path_1.default.join(sdkRoot, 'cmdline-tools', 'latest');
    const cmdline_tools_old = path_1.default.join(sdkRoot, 'cmdline-tools', 'old');
    const cmdline_tools_new = path_1.default.join(sdkRoot, 'cmdline-tools', 'new');
    // remove directors that might conflict later, if present somehow
    (0, utils_1.rmDirSync)(temp_cmdline_tools1);
    (0, utils_1.rmDirSync)(temp_cmdline_tools2);
    (0, utils_1.rmDirSync)(cmdline_tools_old);
    (0, utils_1.rmDirSync)(cmdline_tools_new);
    // if cmdline-tools are already present, shift to temp folder temporarily.
    // also, rename 'latest' to 'old'.
    if (fs_1.default.existsSync(cmdline_tools)) {
        if (fs_1.default.existsSync(cmdline_tools_latest)) {
            fs_1.default.renameSync(cmdline_tools_latest, cmdline_tools_old);
        }
        fs_1.default.renameSync(cmdline_tools, temp_cmdline_tools1);
    }
    // download android sdk (cmdline-tools)
    const result = await (0, common_1.downloadWithProgressBar)(downloads_json_1.default.sdk[platform], sdkRoot, true);
    if (!result) {
        // bring cmdline-tools back to original state
        if (fs_1.default.existsSync(temp_cmdline_tools1)) {
            fs_1.default.renameSync(temp_cmdline_tools1, cmdline_tools);
            if (fs_1.default.existsSync(cmdline_tools_old)) {
                fs_1.default.renameSync(cmdline_tools_old, cmdline_tools_latest);
            }
        }
        throw new Error('Failed to download cmdline-tools.');
    }
    // re-arrange files
    fs_1.default.renameSync(cmdline_tools, temp_cmdline_tools2);
    fs_1.default.mkdirSync(cmdline_tools_new, { recursive: true });
    (0, utils_1.copySync)(temp_cmdline_tools2, cmdline_tools_new);
    (0, utils_1.rmDirSync)(temp_cmdline_tools2);
    // bring back older cmdline-tools, if present
    if (fs_1.default.existsSync(temp_cmdline_tools1)) {
        (0, utils_1.copySync)(temp_cmdline_tools1, cmdline_tools);
        (0, utils_1.rmDirSync)(temp_cmdline_tools1);
    }
    console.log('cmdline-tools downloaded successfully!\n');
    // update sdkmanager
    console.log('Updating cmdline-tools to the latest version...');
    const binaryFullName = (0, common_1.getBinaryNameForOS)(platform, 'sdkmanager');
    let cmd;
    if (platform === 'windows') {
        cmd = `${binaryFullName} "cmdline-tools;latest"`;
    }
    else {
        cmd = `./${binaryFullName} "cmdline-tools;latest"`;
    }
    try {
        (0, child_process_1.execSync)(cmd, {
            input: 'y',
            stdio: ['pipe', 'inherit', 'inherit'],
            cwd: path_1.default.join(cmdline_tools_new, 'bin')
        });
        if (!fs_1.default.existsSync(cmdline_tools_latest)) {
            throw Error();
        }
        (0, utils_1.rmDirSync)(cmdline_tools_new);
        console.log(`${ansi_colors_1.default.green('Success!')} Updated cmdline-tools to the latest version.\n`);
    }
    catch {
        console.log(`${ansi_colors_1.default.red('Failed!')} Falling back to the current downloaded version.\n`);
        fs_1.default.renameSync(cmdline_tools_new, cmdline_tools_latest);
    }
};
exports.downloadAndSetupAndroidSdk = downloadAndSetupAndroidSdk;
const installPackagesUsingSdkManager = (sdkManagerLocation, platform, packages) => {
    const sdkManagerFullName = path_1.default.basename(sdkManagerLocation);
    const sdkManagerDirPath = path_1.default.dirname(sdkManagerLocation);
    let result = true;
    for (const packageName of packages) {
        console.log(`Installing ${packageName}...`);
        let cmd;
        if (platform === 'windows') {
            cmd = `${sdkManagerFullName} "${packageName}"`;
        }
        else {
            cmd = `./${sdkManagerFullName} "${packageName}"`;
        }
        try {
            (0, child_process_1.execSync)(cmd, {
                input: 'y',
                stdio: ['pipe', 'inherit', 'inherit'],
                cwd: sdkManagerDirPath
            });
            console.log(`${ansi_colors_1.default.green('Success!')} ${packageName} installed successfully.\n`);
        }
        catch {
            console.log(`${ansi_colors_1.default.red((0, utils_1.symbols)().fail)} Failed to run ${ansi_colors_1.default.cyan(cmd)} inside '${sdkManagerDirPath}'\n`);
            result = false;
        }
    }
    return result;
};
exports.installPackagesUsingSdkManager = installPackagesUsingSdkManager;
const execBinarySync = (binaryLocation, binaryName, platform, args) => {
    if (binaryLocation === 'PATH') {
        const binaryFullName = (0, common_1.getBinaryNameForOS)(platform, binaryName);
        const cmd = `${binaryFullName} ${args}`;
        try {
            const stdout = (0, child_process_1.execSync)(cmd, {
                stdio: 'pipe'
            });
            return stdout.toString();
        }
        catch {
            console.log(`  ${ansi_colors_1.default.red((0, utils_1.symbols)().fail)} Failed to run ${ansi_colors_1.default.cyan(cmd)}`);
            return null;
        }
    }
    const binaryFullName = path_1.default.basename(binaryLocation);
    const binaryDirPath = path_1.default.dirname(binaryLocation);
    let cmd;
    if (platform === 'windows') {
        cmd = `${binaryFullName} ${args}`;
    }
    else {
        cmd = `./${binaryFullName} ${args}`;
    }
    try {
        const stdout = (0, child_process_1.execSync)(cmd, {
            stdio: 'pipe',
            cwd: binaryDirPath
        });
        return stdout.toString();
    }
    catch {
        console.log(`  ${ansi_colors_1.default.red((0, utils_1.symbols)().fail)} Failed to run ${ansi_colors_1.default.cyan(cmd)} inside '${binaryDirPath}'`);
        return null;
    }
};
exports.execBinarySync = execBinarySync;
const execBinaryAsync = (binaryLocation, binaryName, platform, args) => {
    return new Promise((resolve, reject) => {
        let cmd;
        if (binaryLocation === 'PATH') {
            const binaryFullName = (0, common_1.getBinaryNameForOS)(platform, binaryName);
            cmd = `${binaryFullName} ${args}`;
        }
        else {
            const binaryFullName = path_1.default.basename(binaryLocation);
            const binaryDirPath = path_1.default.dirname(binaryLocation);
            if (platform === 'windows') {
                cmd = `${binaryFullName} ${args}`;
            }
            else {
                cmd = `./${binaryFullName} ${args}`;
            }
            cmd = `cd ${binaryDirPath} && ${cmd}`;
        }
        (0, child_process_1.exec)(cmd, (error, stdout, stderr) => {
            if (error) {
                console.log(`  ${ansi_colors_1.default.red((0, utils_1.symbols)().fail)} Failed to run ${ansi_colors_1.default.cyan(cmd)}`);
                reject(stderr);
            }
            else {
                resolve(stdout.toString());
            }
        });
    });
};
exports.execBinaryAsync = execBinaryAsync;
const spawnCommandSync = (binaryLocation, binaryName, platform, args) => {
    let cmd;
    if (binaryLocation === 'PATH') {
        const binaryFullName = (0, common_1.getBinaryNameForOS)(platform, binaryName);
        cmd = `${binaryFullName}`;
    }
    else {
        cmd = binaryLocation;
    }
    const result = (0, child_process_1.spawnSync)(cmd, args, {
        stdio: 'inherit',
        ...(platform === 'windows' && cmd.endsWith('.bat') && { shell: true })
    });
    if (result.error) {
        console.error(result.error);
        return false;
    }
    return result.status === 0;
};
exports.spawnCommandSync = spawnCommandSync;
const getBuildToolsAvailableVersions = (buildToolsPath) => {
    if (!fs_1.default.existsSync(buildToolsPath)) {
        return [];
    }
    const buildToolsContent = fs_1.default.readdirSync(buildToolsPath);
    const availableVersions = buildToolsContent.filter((name) => name.match(/^(\d+)(\.\d+){2}(-[a-z1-9]+)?/) !== null);
    return availableVersions;
};
exports.getBuildToolsAvailableVersions = getBuildToolsAvailableVersions;
const downloadSdkBuildTools = (sdkManagerLocation, platform) => {
    console.log('Looking for the latest version of build-tools...');
    const versionStdout = (0, exports.execBinarySync)(sdkManagerLocation, 'sdkmanager', platform, '--list');
    if (versionStdout !== null) {
        const versionMatch = versionStdout.match(/build-tools;(\d+)(\.\d+){2}(-[a-z1-9]+)?/g);
        if (!versionMatch) {
            console.log(`  ${ansi_colors_1.default.red((0, utils_1.symbols)().fail)} Failed to get the latest version of build-tools.\n`);
            return false;
        }
        const latestBuildTools = versionMatch.slice(-1);
        console.log();
        return (0, exports.installPackagesUsingSdkManager)(sdkManagerLocation, platform, latestBuildTools);
    }
    console.log();
    return false;
};
exports.downloadSdkBuildTools = downloadSdkBuildTools;
