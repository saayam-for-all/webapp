"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPlatformName = exports.execBinarySync = exports.getBinaryLocation = exports.getBinaryNameForOS = exports.IosSetup = exports.AndroidSetup = exports.run = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const minimist_1 = __importDefault(require("minimist"));
const androidSetup_1 = require("./commands/android/androidSetup");
Object.defineProperty(exports, "AndroidSetup", { enumerable: true, get: function () { return androidSetup_1.AndroidSetup; } });
const constants_1 = require("./constants");
const ios_1 = require("./commands/ios");
Object.defineProperty(exports, "IosSetup", { enumerable: true, get: function () { return ios_1.IosSetup; } });
const android_1 = require("./commands/android");
const run = () => {
    try {
        const argv = process.argv.slice(2);
        const { _: args, ...options } = (0, minimist_1.default)(argv, {
            boolean: ['install', 'setup', 'help', 'appium', 'standalone'],
            alias: {
                help: 'h',
                mode: 'm',
                browsers: ['b', 'browser'],
                setup: ['install', 'i']
            }
        });
        if (!args[0]) {
            if (!options.help) {
                // Show error message if help flag is not present.
                console.log(`${ansi_colors_1.default.red('No command passed.')}\n`);
            }
            showHelp();
        }
        else if (args[0].split('.')[0] === 'android') {
            (0, android_1.handleAndroidCommand)(args, options, argv);
        }
        else if (args[0] === 'ios') {
            if (args.length > 1) {
                // ios command does not accept subcommands.
                console.log(`${ansi_colors_1.default.red(`Too many arguments passed for 'ios' command: ${args.slice(1).join(', ')}`)}\n`);
                console.log(`Run: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper ios --help')} to get help for 'ios' command.`);
            }
            else {
                const iOSSetup = new ios_1.IosSetup(options);
                iOSSetup.run();
            }
        }
        else {
            console.log(`${ansi_colors_1.default.red(`Unknown command passed: ${args[0]}`)}\n`);
            showHelp();
        }
    }
    catch (err) {
        console.error(err);
        process.exit(1);
    }
};
exports.run = run;
const showHelp = () => {
    console.log(`Usage: ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper COMMAND [options|args]')}\n`);
    console.log(`Available commands: ${ansi_colors_1.default.green(constants_1.AVAILABLE_COMMANDS.join(', '))}\n`);
    console.log(`To know more about each command, run:
  ${ansi_colors_1.default.cyan('npx @nightwatch/mobile-helper COMMAND --help')}`);
};
__exportStar(require("./commands/android/adb"), exports);
var common_1 = require("./commands/android/utils/common");
Object.defineProperty(exports, "getBinaryNameForOS", { enumerable: true, get: function () { return common_1.getBinaryNameForOS; } });
Object.defineProperty(exports, "getBinaryLocation", { enumerable: true, get: function () { return common_1.getBinaryLocation; } });
var sdk_1 = require("./commands/android/utils/sdk");
Object.defineProperty(exports, "execBinarySync", { enumerable: true, get: function () { return sdk_1.execBinarySync; } });
var utils_1 = require("./utils");
Object.defineProperty(exports, "getPlatformName", { enumerable: true, get: function () { return utils_1.getPlatformName; } });
