"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.iosRealDeviceUDID = exports.rmDirSync = exports.copySync = exports.getPlatformName = exports.symbols = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const symbols = () => {
    let ok = String.fromCharCode(10004);
    let fail = String.fromCharCode(10006);
    if (process.platform === 'win32') {
        ok = '\u221A';
        fail = '\u00D7';
    }
    return {
        ok: ok,
        fail: fail
    };
};
exports.symbols = symbols;
const getPlatformName = (platform = process.platform) => {
    if (platform === 'win32') {
        return 'windows';
    }
    else if (platform === 'darwin') {
        return 'mac';
    }
    return 'linux';
};
exports.getPlatformName = getPlatformName;
const copySync = (src, dest, excludeDir = []) => {
    const stat = fs_1.default.statSync(src);
    if (stat.isDirectory()) {
        copyDir(src, dest, excludeDir);
    }
    else {
        fs_1.default.copyFileSync(src, dest);
    }
};
exports.copySync = copySync;
const copyDir = (srcDir, destDir, excludeDir) => {
    if (excludeDir.some((dir) => srcDir.endsWith(dir))) {
        return;
    }
    fs_1.default.mkdirSync(destDir, { recursive: true });
    for (const file of fs_1.default.readdirSync(srcDir)) {
        const srcFile = path_1.default.resolve(srcDir, file);
        const destFile = path_1.default.resolve(destDir, file);
        (0, exports.copySync)(srcFile, destFile, excludeDir);
    }
};
const rmDirSync = (dirPath) => {
    if (fs_1.default.existsSync(dirPath)) {
        fs_1.default.readdirSync(dirPath).forEach((file) => {
            const curPath = path_1.default.join(dirPath, file);
            if (fs_1.default.lstatSync(curPath).isDirectory()) {
                // recurse
                (0, exports.rmDirSync)(curPath);
            }
            else {
                // delete file
                fs_1.default.unlinkSync(curPath);
            }
        });
        fs_1.default.rmdirSync(dirPath);
    }
};
exports.rmDirSync = rmDirSync;
const iosRealDeviceUDID = (udid) => {
    if (udid.length > 25) {
        return udid;
    }
    return `${udid.substring(0, 8)}-${udid.substring(9, 25)}`;
};
exports.iosRealDeviceUDID = iosRealDeviceUDID;
