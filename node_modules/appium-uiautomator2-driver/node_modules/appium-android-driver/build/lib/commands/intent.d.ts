/**
 * @deprecated
 * @this {import('../driver').AndroidDriver}
 * @param {string} appPackage
 * @param {string} appActivity
 * @param {string} [appWaitPackage]
 * @param {string} [appWaitActivity]
 * @param {string} [intentAction]
 * @param {string} [intentCategory]
 * @param {string} [intentFlags]
 * @param {string} [optionalIntentArguments]
 * @param {boolean} [dontStopAppOnReset]
 * @returns {Promise<void>}
 */
export function startActivity(this: import("../driver").AndroidDriver, appPackage: string, appActivity: string, appWaitPackage?: string, appWaitActivity?: string, intentAction?: string, intentCategory?: string, intentFlags?: string, optionalIntentArguments?: string, dontStopAppOnReset?: boolean): Promise<void>;
export class startActivity {
    /**
     * @deprecated
     * @this {import('../driver').AndroidDriver}
     * @param {string} appPackage
     * @param {string} appActivity
     * @param {string} [appWaitPackage]
     * @param {string} [appWaitActivity]
     * @param {string} [intentAction]
     * @param {string} [intentCategory]
     * @param {string} [intentFlags]
     * @param {string} [optionalIntentArguments]
     * @param {boolean} [dontStopAppOnReset]
     * @returns {Promise<void>}
     */
    constructor(this: import("../driver").AndroidDriver, appPackage: string, appActivity: string, appWaitPackage?: string, appWaitActivity?: string, intentAction?: string, intentCategory?: string, intentFlags?: string, optionalIntentArguments?: string, dontStopAppOnReset?: boolean);
    _cachedActivityArgs: import("@appium/types").StringRecord;
}
/**
 * @this {import('../driver').AndroidDriver}
 * @param {boolean} [wait] Set it to `true` if you want to block the method call
 * until the activity manager's process returns the control to the system.
 * false by default.
 * @param {boolean} [stop] Set it to `true` to force stop the target
 * app before starting the activity
 * false by default.
 * @param {string | number} [windowingMode] The windowing mode to launch the activity into.
 * Check
 * https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/WindowConfiguration.java
 * for more details on possible windowing modes (constants starting with
 * `WINDOWING_MODE_`).
 * @param {string | number} [activityType] The activity type to launch the activity as.
 * Check https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/WindowConfiguration.java
 * for more details on possible activity types (constants starting with `ACTIVITY_TYPE_`).
 * @param {number | string} [display] The display identifier to launch the activity into.
 * @param {string} [user]
 * @param {string} [intent]
 * @param {string} [action]
 * @param {string} [pkg]
 * @param {string} [uri]
 * @param {string} [mimeType]
 * @param {string} [identifier]
 * @param {string} [component]
 * @param {string | string[]} [categories]
 * @param {string[][]} [extras]
 * @param {string} [flags]
 * @returns {Promise<string>}
 */
export function mobileStartActivity(this: import("../driver").AndroidDriver, wait?: boolean, stop?: boolean, windowingMode?: string | number, activityType?: string | number, display?: number | string, user?: string, intent?: string, action?: string, pkg?: string, uri?: string, mimeType?: string, identifier?: string, component?: string, categories?: string | string[], extras?: string[][], flags?: string): Promise<string>;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string | number} [user] The user ID for which the broadcast is sent.
 * The `current` alias assumes the current user ID.
 * `all` by default.
 * @param {string} [receiverPermission] Require receiver to hold the given permission.
 * @param {boolean} [allowBackgroundActivityStarts] Whether the receiver may start activities even if in the background.
 * @param {string} [intent]
 * @param {string} [action]
 * @param {string} [pkg]
 * @param {string} [uri]
 * @param {string} [mimeType]
 * @param {string} [identifier]
 * @param {string} [component]
 * @param {string | string[]} [categories]
 * @param {string[][]} [extras]
 * @param {string} [flags]
 * @returns {Promise<string>}
 */
export function mobileBroadcast(this: import("../driver").AndroidDriver, receiverPermission?: string, allowBackgroundActivityStarts?: boolean, user?: string | number, intent?: string, action?: string, pkg?: string, uri?: string, mimeType?: string, identifier?: string, component?: string, categories?: string | string[], extras?: string[][], flags?: string): Promise<string>;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {boolean} [foreground] Set it to `true` if your service must be started as foreground service.
 * This option is ignored if the API level of the device under test is below
 *   26 (Android 8).
 * @param {string} [user]
 * @param {string} [intent]
 * @param {string} [action]
 * @param {string} [pkg]
 * @param {string} [uri]
 * @param {string} [mimeType]
 * @param {string} [identifier]
 * @param {string} [component]
 * @param {string | string[]} [categories]
 * @param {string[][]} [extras]
 * @param {string} [flags]
 * @returns {Promise<string>}
 */
export function mobileStartService(this: import("../driver").AndroidDriver, foreground?: boolean, user?: string, intent?: string, action?: string, pkg?: string, uri?: string, mimeType?: string, identifier?: string, component?: string, categories?: string | string[], extras?: string[][], flags?: string): Promise<string>;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} [user]
 * @param {string} [intent]
 * @param {string} [action]
 * @param {string} [pkg]
 * @param {string} [uri]
 * @param {string} [mimeType]
 * @param {string} [identifier]
 * @param {string} [component]
 * @param {string | string[]} [categories]
 * @param {string[][]} [extras]
 * @param {string} [flags]
 * @returns {Promise<string>}
 */
export function mobileStopService(this: import("../driver").AndroidDriver, user?: string, intent?: string, action?: string, pkg?: string, uri?: string, mimeType?: string, identifier?: string, component?: string, categories?: string | string[], extras?: string[][], flags?: string): Promise<string>;
export type ADB = import("appium-adb").ADB;
//# sourceMappingURL=intent.d.ts.map