/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<number>}
 */
export function getNetworkConnection(this: import("../driver").AndroidDriver): Promise<number>;
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<boolean>}
 */
export function isWifiOn(this: import("../driver").AndroidDriver): Promise<boolean>;
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @param {boolean} [wifi] Either to enable or disable Wi-Fi.
 * An unset value means to not change the state for the given service.
 * @param {boolean} [data] Either to enable or disable mobile data connection.
 * An unset value means to not change the state for the given service.
 * @param {boolean} [airplaneMode] Either to enable to disable the Airplane Mode
 * An unset value means to not change the state for the given service.
 * @returns {Promise<void>}
 */
export function mobileSetConnectivity(this: import("../driver").AndroidDriver, wifi?: boolean, data?: boolean, airplaneMode?: boolean): Promise<void>;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {import('./types').ServiceType[] | import('./types').ServiceType} [services] one or more
 * services to get the connectivity for.
 * @returns {Promise<import('./types').GetConnectivityResult>}
 */
export function mobileGetConnectivity(this: import("../driver").AndroidDriver, services?: import("./types").ServiceType[] | import("./types").ServiceType): Promise<import("./types").GetConnectivityResult>;
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @param {number} type
 * @returns {Promise<number>}
 */
export function setNetworkConnection(this: import("../driver").AndroidDriver, type: number): Promise<number>;
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @param {boolean} isOn
 * @returns {Promise<void>}
 */
export function setWifiState(this: import("../driver").AndroidDriver, isOn: boolean): Promise<void>;
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @param {boolean} isOn
 * @returns {Promise<void>}
 */
export function setDataState(this: import("../driver").AndroidDriver, isOn: boolean): Promise<void>;
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<void>}
 */
export function toggleData(this: import("../driver").AndroidDriver): Promise<void>;
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<void>}
 */
export function toggleWiFi(this: import("../driver").AndroidDriver): Promise<void>;
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<void>}
 */
export function toggleFlightMode(this: import("../driver").AndroidDriver): Promise<void>;
export type ADB = import("appium-adb").ADB;
//# sourceMappingURL=network.d.ts.map