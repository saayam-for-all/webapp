/**
 * @this {AndroidDriver}
 * @param {number} [seconds]
 * @returns {Promise<void>}
 */
export function lock(this: import("../../driver").AndroidDriver, seconds?: number): Promise<void>;
/**
 * @this {AndroidDriver}
 * @returns {Promise<boolean>}
 */
export function isLocked(this: import("../../driver").AndroidDriver): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @returns {Promise<void>}
 */
export function unlock(this: import("../../driver").AndroidDriver): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string} [key] The unlock key. The value of this key depends on the actual unlock type and
 * could be a pin/password/pattern value or a biometric finger id.
 * If not provided then the corresponding value from session capabilities is
 * used.
 * @param {import('../types').UnlockType} [type] The unlock type.
 * If not provided then the corresponding value from session capabilities is used.
 * @param {string} [strategy] Setting it to 'uiautomator' will enforce the driver to avoid using special
 * ADB shortcuts in order to speed up the unlock procedure.
 * 'uiautomator' by default.
 * @param {number} [timeoutMs] The maximum time in milliseconds to wait until the screen gets unlocked
 * 2000ms byde fault.
 * @returns {Promise<void>}
 */
export function mobileUnlock(this: import("../../driver").AndroidDriver, key?: string, type?: import("../types").UnlockType, strategy?: string, timeoutMs?: number): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps?} [caps=null]
 * @returns {Promise<void>}
 */
export function unlockWithOptions(this: import("../../driver").AndroidDriver, caps?: AndroidDriverCaps | null): Promise<void>;
export type AndroidDriverCaps = import("@appium/types").Capabilities<import("../../constraints").AndroidDriverConstraints>;
export type AndroidDriver = import("../../driver").AndroidDriver;
//# sourceMappingURL=exports.d.ts.map