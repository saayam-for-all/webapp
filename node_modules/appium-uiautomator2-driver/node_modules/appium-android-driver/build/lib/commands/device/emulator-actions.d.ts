/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {string|number} fingerprintId
 * @returns {Promise<void>}
 */
export function fingerprint(this: import("../../driver").AndroidDriver, fingerprintId: string | number): Promise<void>;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {string | number} fingerprintId The value is the `finger_id` for the finger that was "scanned". It is a
 * unique integer that you assign for each virtual fingerprint. When the app
 * is running you can run this same command each time the emulator prompts you
 * for a fingerprint, you can run the adb command and pass it the `finger_id`
 * to simulate the fingerprint scan.
 * @returns {Promise<void>}
 */
export function mobileFingerprint(this: import("../../driver").AndroidDriver, fingerprintId: string | number): Promise<void>;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {string} phoneNumber
 * @param {string} message
 * @returns {Promise<void>}
 */
export function sendSMS(this: import("../../driver").AndroidDriver, phoneNumber: string, message: string): Promise<void>;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {string} phoneNumber The phone number to send SMS to
 * @param {string} message The message payload
 * @returns {Promise<void>}
 */
export function mobileSendSms(this: import("../../driver").AndroidDriver, phoneNumber: string, message: string): Promise<void>;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {string} phoneNumber
 * @param {string} action
 * @returns {Promise<void>}
 */
export function gsmCall(this: import("../../driver").AndroidDriver, phoneNumber: string, action: string): Promise<void>;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {string} phoneNumber The phone number to call to
 * @param {import('../types').GsmAction} action  Action to take
 * @returns {Promise<void>}
 */
export function mobileGsmCall(this: import("../../driver").AndroidDriver, phoneNumber: string, action: import("../types").GsmAction): Promise<void>;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').GsmSignalStrength} signalStrengh
 * @returns {Promise<void>}
 */
export function gsmSignal(this: import("../../driver").AndroidDriver, signalStrengh: import("../types").GsmSignalStrength): Promise<void>;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').GsmSignalStrength} strength The signal strength value
 * @returns {Promise<void>}
 */
export function mobileGsmSignal(this: import("../../driver").AndroidDriver, strength: import("../types").GsmSignalStrength): Promise<void>;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').GsmVoiceState} state
 * @returns {Promise<void>}
 */
export function gsmVoice(this: import("../../driver").AndroidDriver, state: import("../types").GsmVoiceState): Promise<void>;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').GsmVoiceState} state
 * @returns {Promise<void>}
 */
export function mobileGsmVoice(this: import("../../driver").AndroidDriver, state: import("../types").GsmVoiceState): Promise<void>;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').PowerACState} state
 * @returns {Promise<void>}
 */
export function powerAC(this: import("../../driver").AndroidDriver, state: import("../types").PowerACState): Promise<void>;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').PowerACState} state
 * @returns {Promise<void>}
 */
export function mobilePowerAc(this: import("../../driver").AndroidDriver, state: import("../types").PowerACState): Promise<void>;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {number} batteryPercent
 * @returns {Promise<void>}
 */
export function powerCapacity(this: import("../../driver").AndroidDriver, batteryPercent: number): Promise<void>;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {number} percent Percentage value in range `[0, 100]`
 * @return {Promise<void>}
 */
export function mobilePowerCapacity(this: import("../../driver").AndroidDriver, percent: number): Promise<void>;
/**
 * @deprecated Use mobile: extension
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').NetworkSpeed} networkSpeed
 * @returns {Promise<void>}
 */
export function networkSpeed(this: import("../../driver").AndroidDriver, networkSpeed: import("../types").NetworkSpeed): Promise<void>;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {import('../types').NetworkSpeed} speed
 * @returns {Promise<void>}
 */
export function mobileNetworkSpeed(this: import("../../driver").AndroidDriver, speed: import("../types").NetworkSpeed): Promise<void>;
/**
 * @this {import('../../driver').AndroidDriver}
 * @param {string} sensorType Sensor type as declared in `adb.SENSORS`
 * @param {string} value Value to set to the sensor
 * @returns {Promise<void>}
 */
export function sensorSet(this: import("../../driver").AndroidDriver, sensorType: string, value: string): Promise<void>;
export type ADB = import("appium-adb").ADB;
//# sourceMappingURL=emulator-actions.d.ts.map