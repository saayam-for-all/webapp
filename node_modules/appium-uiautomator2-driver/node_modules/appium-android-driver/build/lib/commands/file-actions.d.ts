/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} remotePath The full path to the remote file or a specially formatted path, which
 * points to an item inside an app bundle, for example `@my.app.id/my/path`.
 * It is mandatory for the app bundle to have debugging enabled in order to
 * use the latter `remotePath` format.
 * @returns {Promise<string>}
 */
export function pullFile(this: import("../driver").AndroidDriver, remotePath: string): Promise<string>;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} remotePath The full path to the remote file or a specially formatted path, which
 * points to an item inside an app bundle, for example `@my.app.id/my/path`.
 * It is mandatory for the app bundle to have debugging enabled in order to
 * use the latter `remotePath` format.
 * @param {string} base64Data Base64-encoded content of the file to be pushed.
 * @returns {Promise<void>}
 */
export function pushFile(this: import("../driver").AndroidDriver, remotePath: string, base64Data: string): Promise<void>;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} remotePath The full path to the remote folder
 * @returns {Promise<string>}
 */
export function pullFolder(this: import("../driver").AndroidDriver, remotePath: string): Promise<string>;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} remotePath The full path to the remote file or a file inside an application bundle
 * (for example `@my.app.id/path/in/bundle`)
 * @returns {Promise<boolean>}
 */
export function mobileDeleteFile(this: import("../driver").AndroidDriver, remotePath: string): Promise<boolean>;
export type ADB = import("appium-adb").ADB;
//# sourceMappingURL=file-actions.d.ts.map