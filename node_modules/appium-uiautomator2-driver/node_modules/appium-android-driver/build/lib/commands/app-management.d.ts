/**
 * @typedef {Object} IsAppInstalledOptions
 * @property {string} [user] - The user id
 */
/**
 * @this {AndroidDriver}
 * @param {string} appId
 * @param {IsAppInstalledOptions} [opts={}]
 * @returns {Promise<boolean>}
 */
export function isAppInstalled(this: import("../driver").AndroidDriver, appId: string, opts?: IsAppInstalledOptions): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @param {string} appId Application package identifier
 * @param {string | number} [user] The user ID for which the package is installed.
 * The `current` user id is used by default.
 * @returns {Promise<boolean>}
 */
export function mobileIsAppInstalled(this: import("../driver").AndroidDriver, appId: string, user?: string | number): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @param {string} appId Application package identifier
 * @returns {Promise<import('./types').AppState>}
 */
export function queryAppState(this: import("../driver").AndroidDriver, appId: string): Promise<import("./types").AppState>;
/**
 * @this {AndroidDriver}
 * @param {string} appId Application package identifier
 * @returns {Promise<void>}
 */
export function activateApp(this: import("../driver").AndroidDriver, appId: string): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string} appId
 * @param {Omit<import('appium-adb').UninstallOptions, 'appId'>} opts
 * @returns {Promise<boolean>}
 */
export function removeApp(this: import("../driver").AndroidDriver, appId: string, opts?: Omit<import("appium-adb").UninstallOptions, "appId">): Promise<boolean>;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} appId Application package identifier
 * @param {number} [timeout] The count of milliseconds to wait until the
 * app is uninstalled.
 * @param {boolean} [keepData] Set to true in order to keep the
 * application data and cache folders after uninstall.
 * @param {boolean} [skipInstallCheck] Whether to check if the app is installed prior to
 * uninstalling it. By default this is checked.
 * @returns {Promise<boolean>}
 */
export function mobileRemoveApp(this: import("../driver").AndroidDriver, appId: string, timeout?: number, keepData?: boolean, skipInstallCheck?: boolean): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @param {string} appId
 * @param {import('./types').TerminateAppOpts} [options={}]
 * @returns {Promise<boolean>}
 */
export function terminateApp(this: import("../driver").AndroidDriver, appId: string, options?: import("./types").TerminateAppOpts): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @param {string} appId Application package identifier
 * @param {number|string} [timeout] The count of milliseconds to wait until the app is terminated.
 * 500ms by default.
 * @returns {Promise<boolean>}
 */
export function mobileTerminateApp(this: import("../driver").AndroidDriver, appId: string, timeout?: number | string): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @param {string} appPath
 * @param {Omit<import('appium-adb').InstallOptions, 'appId'>} opts
 * @returns {Promise<void>}
 */
export function installApp(this: import("../driver").AndroidDriver, appPath: string, opts: Omit<import("appium-adb").InstallOptions, "appId">): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string} appPath
 * @param {boolean} [checkVersion]
 * @param {number} [timeout] The count of milliseconds to wait until the app is installed.
 * 20000ms by default.
 * @param {boolean} [allowTestPackages] Set to true in order to allow test packages installation.
 * `false` by default.
 * @param {boolean} [useSdcard] Set to true to install the app on sdcard instead of the device memory.
 * `false` by default.
 * @param {boolean} [grantPermissions] Set to true in order to grant all the
 * permissions requested in the application's manifest automatically after the installation is completed
 * under Android 6+. `false` by default.
 * @param {boolean} [replace] Set it to false if you don't want the application to be upgraded/reinstalled
 * if it is already present on the device. `true` by default.
 * @param {boolean} [noIncremental] Forcefully disables incremental installs if set to `true`.
 * Read https://developer.android.com/preview/features#incremental for more details.
 * `false` by default.
 * @returns {Promise<void>}
 */
export function mobileInstallApp(this: import("../driver").AndroidDriver, appPath: string, checkVersion?: boolean, timeout?: number, allowTestPackages?: boolean, useSdcard?: boolean, grantPermissions?: boolean, replace?: boolean, noIncremental?: boolean): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string} appId Application package identifier
 * @returns {Promise<void>}
 */
export function mobileClearApp(this: import("../driver").AndroidDriver, appId: string): Promise<void>;
/**
 * @this {AndroidDriver}
 * @returns {Promise<string>}
 */
export function getCurrentActivity(this: import("../driver").AndroidDriver): Promise<string>;
/**
 * @this {AndroidDriver}
 * @returns {Promise<string>}
 */
export function getCurrentPackage(this: import("../driver").AndroidDriver): Promise<string>;
/**
 * @this {AndroidDriver}
 * @param {number} seconds
 * @returns {Promise<string|true>}
 */
export function background(this: import("../driver").AndroidDriver, seconds: number): Promise<string | true>;
/**
 * Puts the app to background and waits the given number of seconds then restores the app
 * if necessary. The call is blocking.
 *
 * @this {AndroidDriver}
 * @param {number} [seconds=-1] The amount of seconds to wait between putting the app to background and restoring it.
 * Any negative value means to not restore the app after putting it to background.
 * @returns {Promise<void>}
 */
export function mobileBackgroundApp(this: import("../driver").AndroidDriver, seconds?: number): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {import('../driver').AndroidDriverOpts?} [opts=null]
 * @returns {Promise<void>}
 */
export function resetAUT(this: import("../driver").AndroidDriver, opts?: import("../driver").AndroidDriverOpts | null): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {import('../driver').AndroidDriverOpts?} [opts=null]
 * @returns {Promise<void>}
 */
export function installAUT(this: import("../driver").AndroidDriver, opts?: import("../driver").AndroidDriverOpts | null): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string[]} otherApps
 * @param {import('../driver').AndroidDriverOpts?} [opts=null]
 * @returns {Promise<void>}
 */
export function installOtherApks(this: import("../driver").AndroidDriver, otherApps: string[], opts?: import("../driver").AndroidDriverOpts | null): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string[]} appPackages
 * @param {string[]} [filterPackages=[]]
 * @returns {Promise<void>}
 */
export function uninstallOtherPackages(this: import("../driver").AndroidDriver, appPackages: string[], filterPackages?: string[]): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string[]} [filterPackages=[]]
 * @returns {Promise<string[]>}
 */
export function getThirdPartyPackages(this: import("../driver").AndroidDriver, filterPackages?: string[]): Promise<string[]>;
export namespace APP_STATE {
    let NOT_INSTALLED: 0;
    let NOT_RUNNING: 1;
    let RUNNING_IN_BACKGROUND: 3;
    let RUNNING_IN_FOREGROUND: 4;
}
export type IsAppInstalledOptions = {
    /**
     * - The user id
     */
    user?: string | undefined;
};
export type AndroidDriver = import("../driver").AndroidDriver;
//# sourceMappingURL=app-management.d.ts.map