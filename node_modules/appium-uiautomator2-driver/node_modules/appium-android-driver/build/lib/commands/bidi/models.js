"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeObsoleteContextUpdatedEvent = exports.makeContextUpdatedEvent = void 0;
exports.makeLogEntryAddedEvent = makeLogEntryAddedEvent;
const helpers_1 = require("../context/helpers");
const constants_1 = require("./constants");
const lodash_1 = __importDefault(require("lodash"));
function toContextUpdatedEvent(method, contextName) {
    return {
        method,
        params: {
            name: contextName,
            type: contextName === helpers_1.NATIVE_WIN ? 'NATIVE' : 'WEB',
        },
    };
}
const makeContextUpdatedEvent = (contextName, domain) => toContextUpdatedEvent((0, constants_1.CONTEXT_UPDATED_EVENT)(domain), contextName);
exports.makeContextUpdatedEvent = makeContextUpdatedEvent;
/**
 * @deprecated Use {@link makeContextUpdatedEvent} instead
 */
const makeObsoleteContextUpdatedEvent = (contextName) => toContextUpdatedEvent(constants_1.CONTEXT_UPDATED_EVENT_OBSOLETE, contextName);
exports.makeObsoleteContextUpdatedEvent = makeObsoleteContextUpdatedEvent;
function makeLogEntryAddedEvent(entry, context, type) {
    return {
        context,
        method: constants_1.LOG_ENTRY_ADDED_EVENT,
        params: {
            type,
            level: adjustLogLevel(entry.level),
            source: {
                realm: '',
            },
            text: entry.message,
            timestamp: entry.timestamp,
        },
    };
}
function adjustLogLevel(originalLevel) {
    const originalLevelLc = lodash_1.default.toLower(originalLevel);
    switch (originalLevelLc) {
        case 'debug':
        case 'info':
        case 'warn':
        case 'error':
            return originalLevelLc;
        default:
            return 'info';
    }
}
//# sourceMappingURL=models.js.map