/**
 * Assert the presence of particular keys in the given object
 *
 * @param {string|string[]} argNames one or more key names
 * @param {any} opts the object to check
 * @returns {Record<string, any>} the same given object
 */
export function requireArgs(argNames: string | string[], opts: any): Record<string, any>;
/**
 *
 * @param {string | string[]} cap
 * @returns {string[]}
 */
export function parseArray(cap: string | string[]): string[];
/**
 * @param {import('@appium/types').AppiumServer} server
 * @param {string?} [sessionId]
 * @returns {Promise<void>}
 */
export function removeAllSessionWebSocketHandlers(server: import("@appium/types").AppiumServer, sessionId?: string | null): Promise<void>;
/**
 *
 * @param {Object} x
 * @returns {LogEntry}
 */
export function nativeLogEntryToSeleniumEntry(x: any): LogEntry;
/**
 *
 * @see {@link https://github.com/SeleniumHQ/selenium/blob/0d425676b3c9df261dd641917f867d4d5ce7774d/java/client/src/org/openqa/selenium/logging/LogEntry.java}
 * @param {number} timestamp
 * @param {string} message
 * @param {string} [level='ALL']
 * @returns {LogEntry}
 */
export function toLogRecord(timestamp: number, message: string, level?: string): LogEntry;
export const ADB_SHELL_FEATURE: "adb_shell";
export const GET_SERVER_LOGS_FEATURE: "get_server_logs";
export type LogEntry = import("appium-adb").LogEntry;
//# sourceMappingURL=utils.d.ts.map