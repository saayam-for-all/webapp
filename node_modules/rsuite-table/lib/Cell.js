'use client';
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports["default"] = void 0;
var _extends4 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _omit = _interopRequireDefault(require("lodash/omit"));
var _isNil = _interopRequireDefault(require("lodash/isNil"));
var _get = _interopRequireDefault(require("lodash/get"));
var _constants = require("./constants");
var _utils = require("./utils");
var _TableContext = _interopRequireDefault(require("./TableContext"));
var _ArrowRight = _interopRequireDefault(require("@rsuite/icons/ArrowRight"));
var _ArrowDown = _interopRequireDefault(require("@rsuite/icons/ArrowDown"));
var _Column = require("./Column");
var _excluded = ["classPrefix", "width", "left", "headerHeight", "depth", "height", "style", "className", "fullText", "firstColumn", "lastColumn", "isHeaderCell", "align", "children", "rowData", "dataKey", "rowIndex", "removed", "rowKey", "rowSpan", "wordWrap", "verticalAlign", "expanded", "treeCol", "hasChildren", "predefinedStyle", "renderCell", "renderTreeToggle", "onClick", "onTreeToggle"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var groupKeys = ['groupCount', 'groupHeader', 'groupHeaderHeight', 'groupAlign', 'groupVerticalAlign', 'renderSortIcon'];
var Cell = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  var _extends2, _extends3;
  var _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'cell' : _props$classPrefix,
    _props$width = props.width,
    width = _props$width === void 0 ? 0 : _props$width,
    _props$left = props.left,
    left = _props$left === void 0 ? 0 : _props$left,
    _props$headerHeight = props.headerHeight,
    headerHeight = _props$headerHeight === void 0 ? _constants.ROW_HEADER_HEIGHT : _props$headerHeight,
    _props$depth = props.depth,
    depth = _props$depth === void 0 ? 0 : _props$depth,
    _props$height = props.height,
    height = _props$height === void 0 ? _constants.ROW_HEIGHT : _props$height,
    style = props.style,
    className = props.className,
    fullText = props.fullText,
    firstColumn = props.firstColumn,
    lastColumn = props.lastColumn,
    isHeaderCell = props.isHeaderCell,
    align = props.align,
    children = props.children,
    rowData = props.rowData,
    dataKey = props.dataKey,
    rowIndex = props.rowIndex,
    removed = props.removed,
    rowKey = props.rowKey,
    rowSpan = props.rowSpan,
    wordWrap = props.wordWrap,
    verticalAlign = props.verticalAlign,
    expanded = props.expanded,
    treeCol = props.treeCol,
    hasChildren = props.hasChildren,
    predefinedStyle = props.predefinedStyle,
    renderCell = props.renderCell,
    renderTreeToggle = props.renderTreeToggle,
    onClick = props.onClick,
    onTreeToggle = props.onTreeToggle,
    rest = (0, _objectWithoutPropertiesLoose2["default"])(props, _excluded);
  var _React$useContext = _react["default"].useContext(_TableContext["default"]),
    rtl = _React$useContext.rtl,
    hasCustomTreeCol = _React$useContext.hasCustomTreeCol,
    isTree = _React$useContext.isTree;
  var isTreeCol = treeCol || !hasCustomTreeCol && firstColumn && isTree;
  var cellHeight = typeof height === 'function' ? rowData ? height(rowData) : _constants.ROW_HEIGHT : height;
  if (isTreeCol && !isHeaderCell && !rowData) {
    throw new Error('[Table.Cell]: `rowData` is required for tree column');
  }
  var handleTreeToggle = (0, _react.useCallback)(function (event) {
    onTreeToggle === null || onTreeToggle === void 0 ? void 0 : onTreeToggle(rowKey, rowIndex, rowData, event);
  }, [onTreeToggle, rowData, rowIndex, rowKey]);
  var _useClassNames = (0, _utils.useClassNames)(classPrefix),
    withClassPrefix = _useClassNames.withClassPrefix,
    merge = _useClassNames.merge,
    prefix = _useClassNames.prefix;
  var classes = merge(className, withClassPrefix({
    expanded: expanded && isTreeCol,
    first: firstColumn,
    last: lastColumn,
    rowspan: rowSpan && !isHeaderCell,
    'full-text': fullText
  }));
  var nextHeight = isHeaderCell ? headerHeight : cellHeight;
  var styles = (0, _extends4["default"])({}, predefinedStyle, (_extends2 = {}, _extends2[fullText ? 'minWidth' : 'width'] = width, _extends2.height = nextHeight, _extends2.zIndex = depth, _extends2[rtl ? 'right' : 'left'] = left, _extends2));
  var paddingKey = rtl ? 'paddingRight' : 'paddingLeft';
  var contentStyles = (0, _extends4["default"])({}, (0, _utils.convertToFlex)({
    align: align,
    verticalAlign: verticalAlign
  }), style, (_extends3 = {
    width: fullText ? width - 1 : width,
    height: nextHeight
  }, _extends3[paddingKey] = isTreeCol ? depth * _constants.LAYER_WIDTH + 10 : (style === null || style === void 0 ? void 0 : style[paddingKey]) || (style === null || style === void 0 ? void 0 : style.padding), _extends3));
  if (wordWrap) {
    contentStyles.wordBreak = typeof wordWrap === 'boolean' ? 'break-all' : wordWrap;
    contentStyles.overflowWrap = wordWrap === 'break-word' ? wordWrap : undefined;
  }
  var cellContent = null;
  if (typeof children === 'function') {
    if (!rowData) {
      cellContent = null;
    } else {
      cellContent = children(rowData, rowIndex);
    }
  } else if ((0, _isNil["default"])(children)) {
    if (rowData && dataKey) {
      cellContent = (0, _get["default"])(rowData, dataKey);
    }
  } else {
    cellContent = children;
  }
  var renderTreeNodeExpandIcon = function renderTreeNodeExpandIcon() {
    var ExpandIconComponent = expanded ? _ArrowDown["default"] : _ArrowRight["default"];
    var expandButton = /*#__PURE__*/_react["default"].createElement(ExpandIconComponent, {
      className: prefix('expand-icon')
    });
    if (isTreeCol && hasChildren) {
      return /*#__PURE__*/_react["default"].createElement("span", {
        role: "button",
        tabIndex: -1,
        className: prefix('expand-wrapper'),
        onClick: handleTreeToggle
      }, renderTreeToggle ? renderTreeToggle(expandButton, rowData, expanded) : expandButton);
    }
    return null;
  };
  var content = wordWrap ? /*#__PURE__*/_react["default"].createElement("div", {
    className: prefix('wrap')
  }, renderTreeNodeExpandIcon(), renderCell ? renderCell(cellContent) : cellContent) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, renderTreeNodeExpandIcon(), renderCell ? renderCell(cellContent) : cellContent);
  if (removed) {
    return null;
  }
  return /*#__PURE__*/_react["default"].createElement("div", (0, _extends4["default"])({
    ref: ref,
    role: isHeaderCell ? 'columnheader' : 'gridcell'
  }, (0, _omit["default"])(rest, [].concat(groupKeys, _Column.columnHandledProps)), {
    onClick: onClick,
    className: classes,
    style: styles
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: prefix('content'),
    style: contentStyles
  }, content));
});
Cell.displayName = 'Table.Cell';
Cell.propTypes = {
  align: _propTypes["default"].string,
  verticalAlign: _propTypes["default"].string,
  className: _propTypes["default"].string,
  classPrefix: _propTypes["default"].string,
  dataKey: _propTypes["default"].string,
  isHeaderCell: _propTypes["default"].bool,
  width: _propTypes["default"].number,
  height: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].func]),
  left: _propTypes["default"].number,
  headerHeight: _propTypes["default"].number,
  style: _propTypes["default"].object,
  firstColumn: _propTypes["default"].bool,
  lastColumn: _propTypes["default"].bool,
  hasChildren: _propTypes["default"].bool,
  children: _propTypes["default"].any,
  rowKey: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
  rowIndex: _propTypes["default"].number,
  rowData: _propTypes["default"].object,
  depth: _propTypes["default"].number,
  onTreeToggle: _propTypes["default"].func,
  renderTreeToggle: _propTypes["default"].func,
  renderCell: _propTypes["default"].func,
  wordWrap: _propTypes["default"].any,
  removed: _propTypes["default"].bool,
  treeCol: _propTypes["default"].bool,
  expanded: _propTypes["default"].bool,
  fullText: _propTypes["default"].bool
};
var _default = exports["default"] = Cell;