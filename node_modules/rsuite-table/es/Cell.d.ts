import React from 'react';
import { StandardProps, RowDataType, RowKeyType } from './@types/common';
export interface CellProps<Row extends RowDataType> extends StandardProps {
    /** Data binding key, but also a sort of key */
    dataKey?: string;
    /** Row Number */
    rowIndex?: number;
    /** Row Data */
    rowData?: Row;
}
export interface InnerCellProps<Row extends RowDataType, Key extends RowKeyType> extends Omit<CellProps<Row>, 'children'> {
    align?: React.CSSProperties['justifyContent'];
    verticalAlign?: React.CSSProperties['alignItems'] | 'top' | 'middle' | 'bottom';
    isHeaderCell?: boolean;
    width?: number;
    height?: number | ((rowData: Row) => number);
    left?: number;
    headerHeight?: number;
    style?: React.CSSProperties;
    fullText?: boolean;
    firstColumn?: boolean;
    lastColumn?: boolean;
    hasChildren?: boolean;
    children?: React.ReactNode | ((rowData: Row, rowIndex?: number) => React.ReactNode);
    rowKey?: Key;
    rowSpan?: number;
    depth?: number;
    wordWrap?: boolean | 'break-all' | 'break-word' | 'keep-all';
    removed?: boolean;
    treeCol?: boolean;
    expanded?: boolean;
    predefinedStyle?: React.CSSProperties;
    onTreeToggle?: (rowKey?: Key, rowIndex?: number, rowData?: Row, event?: React.MouseEvent) => void;
    renderTreeToggle?: (expandButton: React.ReactNode, rowData?: Row, expanded?: boolean) => React.ReactNode;
    renderCell?: (contentChildren: any) => React.ReactNode;
}
declare const _default: <Row extends RowDataType, Key extends RowKeyType>(props: InnerCellProps<Row, Key> & React.RefAttributes<HTMLDivElement>) => React.ReactElement;
export default _default;
