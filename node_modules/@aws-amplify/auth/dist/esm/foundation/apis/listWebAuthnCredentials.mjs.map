{"version":3,"file":"listWebAuthnCredentials.mjs","sources":["../../../../src/foundation/apis/listWebAuthnCredentials.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../parsers';\nimport { getAuthUserAgentValue } from '../../utils';\nimport { createListWebAuthnCredentialsClient } from '../factories/serviceClients/cognitoIdentityProvider';\nexport async function listWebAuthnCredentials(amplify, input) {\n    const authConfig = amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await amplify.Auth.fetchAuthSession();\n    assertAuthTokens(tokens);\n    const listWebAuthnCredentialsResult = createListWebAuthnCredentialsClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { Credentials: commandCredentials = [], NextToken: nextToken } = await listWebAuthnCredentialsResult({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ListWebAuthnCredentials),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        MaxResults: input?.pageSize,\n        NextToken: input?.nextToken,\n    });\n    const credentials = commandCredentials.map(item => ({\n        credentialId: item.CredentialId,\n        friendlyCredentialName: item.FriendlyCredentialName,\n        relyingPartyId: item.RelyingPartyId,\n        authenticatorAttachment: item.AuthenticatorAttachment,\n        authenticatorTransports: item.AuthenticatorTransports,\n        createdAt: item.CreatedAt ? new Date(item.CreatedAt * 1000) : undefined,\n    }));\n    return {\n        credentials,\n        nextToken,\n    };\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AAOO,eAAe,uBAAuB,CAAC,OAAO,EAAE,KAAK,EAAE;AAC9D,IAAI,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;AACzD,IAAI,yBAAyB,CAAC,UAAU,CAAC,CAAC;AAC1C,IAAI,MAAM,EAAE,gBAAgB,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC;AACxD,IAAI,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC7D,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAI,MAAM,6BAA6B,GAAG,mCAAmC,CAAC;AAC9E,QAAQ,gBAAgB,EAAE,qCAAqC,CAAC;AAChE,YAAY,gBAAgB,EAAE,gBAAgB;AAC9C,SAAS,CAAC;AACV,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,EAAE,WAAW,EAAE,kBAAkB,GAAG,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,MAAM,6BAA6B,CAAC;AAC/G,QAAQ,MAAM,EAAE,uBAAuB,CAAC,UAAU,CAAC;AACnD,QAAQ,cAAc,EAAE,qBAAqB,CAAC,UAAU,CAAC,uBAAuB,CAAC;AACjF,KAAK,EAAE;AACP,QAAQ,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE;AAClD,QAAQ,UAAU,EAAE,KAAK,EAAE,QAAQ;AACnC,QAAQ,SAAS,EAAE,KAAK,EAAE,SAAS;AACnC,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,WAAW,GAAG,kBAAkB,CAAC,GAAG,CAAC,IAAI,KAAK;AACxD,QAAQ,YAAY,EAAE,IAAI,CAAC,YAAY;AACvC,QAAQ,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;AAC3D,QAAQ,cAAc,EAAE,IAAI,CAAC,cAAc;AAC3C,QAAQ,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;AAC7D,QAAQ,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;AAC7D,QAAQ,SAAS,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,SAAS;AAC/E,KAAK,CAAC,CAAC,CAAC;AACR,IAAI,OAAO;AACX,QAAQ,WAAW;AACnB,QAAQ,SAAS;AACjB,KAAK,CAAC;AACN;;;;"}