{"version":3,"file":"serde.js","sources":["../../../../../src/client/utils/passkey/serde.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializePkcWithAssertionToJson = exports.deserializeJsonToPkcGetOptions = exports.serializePkcWithAttestationToJson = exports.deserializeJsonToPkcCreationOptions = void 0;\nconst convert_1 = require(\"../../../foundation/convert\");\n/**\n * Deserializes Public Key Credential Creation Options JSON\n * @param input PasskeyCreateOptionsJson\n * @returns PublicKeyCredentialCreationOptions\n */\nconst deserializeJsonToPkcCreationOptions = (input) => {\n    const userIdBuffer = (0, convert_1.convertBase64UrlToArrayBuffer)(input.user.id);\n    const challengeBuffer = (0, convert_1.convertBase64UrlToArrayBuffer)(input.challenge);\n    const excludeCredentialsWithBuffer = (input.excludeCredentials || []).map(excludeCred => ({\n        ...excludeCred,\n        id: (0, convert_1.convertBase64UrlToArrayBuffer)(excludeCred.id),\n    }));\n    return {\n        ...input,\n        excludeCredentials: excludeCredentialsWithBuffer,\n        challenge: challengeBuffer,\n        user: {\n            ...input.user,\n            id: userIdBuffer,\n        },\n    };\n};\nexports.deserializeJsonToPkcCreationOptions = deserializeJsonToPkcCreationOptions;\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyCreateResult\n * @returns PasskeyCreateResultJson\n */\nconst serializePkcWithAttestationToJson = (input) => {\n    const response = {\n        clientDataJSON: (0, convert_1.convertArrayBufferToBase64Url)(input.response.clientDataJSON),\n        attestationObject: (0, convert_1.convertArrayBufferToBase64Url)(input.response.attestationObject),\n        transports: input.response.getTransports(),\n        publicKeyAlgorithm: input.response.getPublicKeyAlgorithm(),\n        authenticatorData: (0, convert_1.convertArrayBufferToBase64Url)(input.response.getAuthenticatorData()),\n    };\n    const publicKey = input.response.getPublicKey();\n    if (publicKey) {\n        response.publicKey = (0, convert_1.convertArrayBufferToBase64Url)(publicKey);\n    }\n    const resultJson = {\n        type: input.type,\n        id: input.id,\n        rawId: (0, convert_1.convertArrayBufferToBase64Url)(input.rawId),\n        clientExtensionResults: input.getClientExtensionResults(),\n        response,\n    };\n    if (input.authenticatorAttachment) {\n        resultJson.authenticatorAttachment = input.authenticatorAttachment;\n    }\n    return resultJson;\n};\nexports.serializePkcWithAttestationToJson = serializePkcWithAttestationToJson;\n/**\n * Deserializes Public Key Credential Get Options JSON\n * @param input PasskeyGetOptionsJson\n * @returns PublicKeyCredentialRequestOptions\n */\nconst deserializeJsonToPkcGetOptions = (input) => {\n    const challengeBuffer = (0, convert_1.convertBase64UrlToArrayBuffer)(input.challenge);\n    const allowedCredentialsWithBuffer = (input.allowCredentials || []).map(allowedCred => ({\n        ...allowedCred,\n        id: (0, convert_1.convertBase64UrlToArrayBuffer)(allowedCred.id),\n    }));\n    return {\n        ...input,\n        challenge: challengeBuffer,\n        allowCredentials: allowedCredentialsWithBuffer,\n    };\n};\nexports.deserializeJsonToPkcGetOptions = deserializeJsonToPkcGetOptions;\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyGetResult\n * @returns PasskeyGetResultJson\n */\nconst serializePkcWithAssertionToJson = (input) => {\n    const response = {\n        clientDataJSON: (0, convert_1.convertArrayBufferToBase64Url)(input.response.clientDataJSON),\n        authenticatorData: (0, convert_1.convertArrayBufferToBase64Url)(input.response.authenticatorData),\n        signature: (0, convert_1.convertArrayBufferToBase64Url)(input.response.signature),\n    };\n    if (input.response.userHandle) {\n        response.userHandle = (0, convert_1.convertArrayBufferToBase64Url)(input.response.userHandle);\n    }\n    const resultJson = {\n        id: input.id,\n        rawId: (0, convert_1.convertArrayBufferToBase64Url)(input.rawId),\n        type: input.type,\n        clientExtensionResults: input.getClientExtensionResults(),\n        response,\n    };\n    if (input.authenticatorAttachment) {\n        resultJson.authenticatorAttachment = input.authenticatorAttachment;\n    }\n    return resultJson;\n};\nexports.serializePkcWithAssertionToJson = serializePkcWithAssertionToJson;\n"],"names":[],"mappings":"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"}