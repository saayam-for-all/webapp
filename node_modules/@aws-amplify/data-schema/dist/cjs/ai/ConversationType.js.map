{"version":3,"file":"ConversationType.js","sources":["../../../src/ai/ConversationType.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.conversation = exports.dataTool = exports.brandName = void 0;\nconst Authorization_1 = require(\"../Authorization\");\nconst util_1 = require(\"../util\");\nexports.brandName = 'conversationCustomOperation';\n/**\n * Define a data tool to be used within an AI conversation route.\n *\n * @remarks\n *\n * Data tools can use a model generated list query or a custom query.\n * The tool's name must satisfy the following requirements:\n * - Be unique across all tools for a given conversation.\n * - Length must be between 1 and 64 characters.\n * - Must start with a letter.\n * - Must contain only letters, numbers, and underscores.\n *\n * The tool's `name` and `description` are used by the LLM to help it understand\n * the tool's purpose.\n *\n * @example\n *\n * realtorChat: a.conversation({\n *   aiModel: a.ai.model('Claude 3 Haiku'),\n *   systemPrompt: 'You are a helpful real estate assistant',\n *   tools: [\n *     // Data tools can use a model generated list query.\n *     a.ai.dataTool({\n *       name: 'get_listed_properties',\n *       description: 'Get properties currently listed for sale',\n *       model: a.model('RealEstateProperty'),\n *       modelOperation: 'list',\n *     }),\n *     // Data tools can also use a custom query.\n *     a.ai.dataTool({\n *       name: 'get_oncall_realtor',\n *       description: 'Get the oncall realtor',\n *       query: a.query('getOnCallRealtor'),\n *     }),\n *   ],\n * })\n * @returns a data tool definition\n */\nfunction dataTool(input) {\n    return input;\n}\nexports.dataTool = dataTool;\nfunction _conversation(input) {\n    const data = {\n        authorization: [],\n    };\n    const builder = {\n        authorization(callback) {\n            const rules = callback(Authorization_1.allowForConversations);\n            data.authorization = Array.isArray(rules) ? rules : [rules];\n            return this;\n        },\n    };\n    return {\n        ...(0, util_1.brand)(exports.brandName),\n        ...input,\n        ...builder,\n        data,\n    };\n}\n/**\n * Define an AI conversation route which enables multi-turn conversation APIs for interacting with specified AI model.\n * @example\n * realtorChat: a.conversation({\n *   aiModel: { resourcePath },\n *   systemPrompt: 'You are a helpful real estate assistant',\n * })\n * @returns a conversation route definition\n */\nfunction conversation(input) {\n    return _conversation(input);\n}\nexports.conversation = conversation;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;AACrE,MAAM,eAAe,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AACpD,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAClC,OAAO,CAAC,SAAS,GAAG,6BAA6B,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ,CAAC,KAAK,EAAE;AACzB,IAAI,OAAO,KAAK,CAAC;AACjB,CAAC;AACD,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC5B,SAAS,aAAa,CAAC,KAAK,EAAE;AAC9B,IAAI,MAAM,IAAI,GAAG;AACjB,QAAQ,aAAa,EAAE,EAAE;AACzB,KAAK,CAAC;AACN,IAAI,MAAM,OAAO,GAAG;AACpB,QAAQ,aAAa,CAAC,QAAQ,EAAE;AAChC,YAAY,MAAM,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;AAC1E,YAAY,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;AACxE,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,KAAK,CAAC;AACN,IAAI,OAAO;AACX,QAAQ,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,SAAS,CAAC;AAC/C,QAAQ,GAAG,KAAK;AAChB,QAAQ,GAAG,OAAO;AAClB,QAAQ,IAAI;AACZ,KAAK,CAAC;AACN,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY,CAAC,KAAK,EAAE;AAC7B,IAAI,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;AAChC,CAAC;AACD,OAAO,CAAC,YAAY,GAAG,YAAY;;"}