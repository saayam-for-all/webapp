{"version":3,"file":"initializePushNotifications.native.mjs","sources":["../../../../../../src/pushNotifications/providers/pinpoint/apis/initializePushNotifications.native.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger } from '@aws-amplify/core';\nimport { PushNotificationAction } from '@aws-amplify/core/internals/utils';\nimport { updateEndpoint } from '@aws-amplify/core/internals/providers/pinpoint';\nimport { loadAmplifyPushNotification } from '@aws-amplify/react-native';\nimport { addEventListener, notifyEventListeners, notifyEventListenersAndAwaitHandlers, } from '../../../../eventListeners';\nimport { getPushNotificationUserAgentString, getToken, initialize, isInitialized, resolveCredentials, setToken, } from '../../../utils';\nimport { createMessageEventRecorder, getChannelType, rejectInflightDeviceRegistration, resolveConfig, resolveInflightDeviceRegistration, } from '../utils';\nconst { addMessageEventListener, addTokenEventListener, completeNotification, getConstants, registerHeadlessTask, } = loadAmplifyPushNotification();\nconst logger = new ConsoleLogger('Notifications.PushNotification');\nconst BACKGROUND_TASK_TIMEOUT = 25; // seconds\nexport const initializePushNotifications = () => {\n    if (isInitialized()) {\n        logger.info('Push notifications have already been enabled');\n        return;\n    }\n    addNativeListeners();\n    addAnalyticsListeners();\n    initialize();\n};\nconst addNativeListeners = () => {\n    let launchNotificationOpenedListener;\n    const { NativeEvent, NativeHeadlessTaskKey } = getConstants();\n    const { BACKGROUND_MESSAGE_RECEIVED, FOREGROUND_MESSAGE_RECEIVED, LAUNCH_NOTIFICATION_OPENED, NOTIFICATION_OPENED, TOKEN_RECEIVED, } = NativeEvent;\n    // on platforms that can handle headless tasks, register one to broadcast background message received to\n    // library listeners\n    if (NativeHeadlessTaskKey) {\n        registerHeadlessTask(async (message) => {\n            // keep headless task running until handlers have completed their work\n            await notifyEventListenersAndAwaitHandlers('backgroundMessageReceived', message);\n        });\n    }\n    else if (BACKGROUND_MESSAGE_RECEIVED) {\n        // on platforms that can't handle headless tasks, listen for native background message received event and\n        // broadcast to library listeners\n        addMessageEventListener(BACKGROUND_MESSAGE_RECEIVED, async (message, completionHandlerId) => {\n            // keep background task running until handlers have completed their work\n            try {\n                await Promise.race([\n                    notifyEventListenersAndAwaitHandlers('backgroundMessageReceived', message),\n                    // background tasks will get suspended and all future tasks be deprioritized by the OS if they run for\n                    // more than 30 seconds so we reject with a error in a shorter amount of time to prevent this from\n                    // happening\n                    new Promise((_resolve, reject) => {\n                        setTimeout(() => {\n                            reject(new Error(`onNotificationReceivedInBackground handlers should complete their work within ${BACKGROUND_TASK_TIMEOUT} seconds, but they did not.`));\n                        }, BACKGROUND_TASK_TIMEOUT * 1000);\n                    }),\n                ]);\n            }\n            catch (err) {\n                logger.error(err);\n            }\n            finally {\n                // notify native module that handlers have completed their work (or timed out)\n                if (completionHandlerId) {\n                    completeNotification(completionHandlerId);\n                }\n            }\n        });\n    }\n    addMessageEventListener(\n    // listen for native foreground message received event and broadcast to library listeners\n    FOREGROUND_MESSAGE_RECEIVED, message => {\n        notifyEventListeners('foregroundMessageReceived', message);\n    });\n    launchNotificationOpenedListener = LAUNCH_NOTIFICATION_OPENED\n        ? addMessageEventListener(\n        // listen for native notification opened app (user tapped on notification, opening the app from quit -\n        // not background - state) event. This is broadcasted to an internal listener only as it is not intended\n        // for use otherwise as it produces inconsistent results when used within React Native app context\n        LAUNCH_NOTIFICATION_OPENED, message => {\n            notifyEventListeners('launchNotificationOpened', message);\n            // once we are done with it we can remove the listener\n            launchNotificationOpenedListener?.remove();\n            launchNotificationOpenedListener = undefined;\n        })\n        : undefined;\n    addMessageEventListener(\n    // listen for native notification opened (user tapped on notification, opening the app from background -\n    // not quit - state) event and broadcast to library listeners\n    NOTIFICATION_OPENED, message => {\n        notifyEventListeners('notificationOpened', message);\n        // if we are in this state, we no longer need the listener as the app was launched via some other means\n        launchNotificationOpenedListener?.remove();\n    });\n    addTokenEventListener(\n    // listen for native new token event, automatically re-register device with provider using new token and\n    // broadcast to library listeners\n    TOKEN_RECEIVED, async (token) => {\n        // avoid a race condition where two endpoints are created with the same token on a fresh install\n        if (getToken() === token) {\n            return;\n        }\n        setToken(token);\n        notifyEventListeners('tokenReceived', token);\n        try {\n            await registerDevice(token);\n        }\n        catch (err) {\n            logger.error('Failed to register device for push notifications', err);\n            throw err;\n        }\n    });\n};\nconst addAnalyticsListeners = () => {\n    let launchNotificationOpenedListenerRemover;\n    // wire up default Pinpoint message event handling\n    addEventListener('backgroundMessageReceived', createMessageEventRecorder('received_background'));\n    addEventListener('foregroundMessageReceived', createMessageEventRecorder('received_foreground'));\n    launchNotificationOpenedListenerRemover = addEventListener('launchNotificationOpened', createMessageEventRecorder('opened_notification', \n    // once we are done with it we can remove the listener\n    () => {\n        launchNotificationOpenedListenerRemover?.remove();\n        launchNotificationOpenedListenerRemover = undefined;\n    }));\n    addEventListener('notificationOpened', createMessageEventRecorder('opened_notification', \n    // if we are in this state, we no longer need the listener as the app was launched via some other means\n    () => {\n        launchNotificationOpenedListenerRemover?.remove();\n        launchNotificationOpenedListenerRemover = undefined;\n    }));\n};\nconst registerDevice = async (address) => {\n    const { credentials, identityId } = await resolveCredentials();\n    const { appId, region } = resolveConfig();\n    try {\n        await updateEndpoint({\n            address,\n            appId,\n            category: 'PushNotification',\n            credentials,\n            region,\n            channelType: getChannelType(),\n            identityId,\n            userAgentValue: getPushNotificationUserAgentString(PushNotificationAction.InitializePushNotifications),\n        });\n        // always resolve inflight device registration promise here even though the promise is only awaited on by\n        // `identifyUser` when no endpoint is found in the cache\n        resolveInflightDeviceRegistration();\n    }\n    catch (underlyingError) {\n        rejectInflightDeviceRegistration(underlyingError);\n        throw underlyingError;\n    }\n};\n"],"names":[],"mappings":"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"}