{"version":3,"file":"identifyUser.js","sources":["../../../../../../src/pushNotifications/providers/pinpoint/apis/identifyUser.ts"],"sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.identifyUser = void 0;\nconst utils_1 = require(\"@aws-amplify/core/internals/utils\");\n/**\n * Sends information about a user to Pinpoint. Sending user information allows you to associate a user to their user\n * profile and activities or actions in your application. Activity can be tracked across devices & platforms by using\n * the same `userId`.\n *\n * @param {IdentifyUserInput} input The input object used to construct requests sent to Pinpoint's UpdateEndpoint\n *  API.\n * @throws service: {@link UpdateEndpointException} - Thrown when the underlying Pinpoint service returns an error.\n * @throws validation: {@link PushNotificationValidationErrorCode} - Thrown when the provided parameters or library\n *  configuration is incorrect.\n * @throws platform: {@link PlatformNotSupportedError} - Thrown if called against an unsupported platform. Currently,\n * only React Native is supported by this API.\n * @returns A promise that will resolve when the operation is complete.\n * @example\n * ```ts\n * // Identify a user with Pinpoint\n * await identifyUser({\n *     userId,\n *     userProfile: {\n *         email: 'userEmail@example.com'\n *         customProperties: {\n *             phoneNumber: ['555-555-5555'],\n *         },\n *     }\n * });\n * ```\n *\n * @example\n * ```ts\n * // Identify a user with Pinpoint specific options\n * await identifyUser({\n *     userId,\n *     userProfile: {\n *         email: 'userEmail@example.com'\n *         customProperties: {\n *             phoneNumber: ['555-555-5555'],\n *         },\n *         demographic: {\n *             platform: 'ios',\n *             timezone: 'America/Los_Angeles'\n *         }\n *     },\n *     options: {\n *         address: 'device-address',\n *         optOut: 'NONE',\n *         userAttributes: {\n *             interests: ['food']\n *         },\n *     },\n * });\n */\nconst identifyUser = async () => {\n    throw new utils_1.PlatformNotSupportedError();\n};\nexports.identifyUser = identifyUser;\n"],"names":[],"mappings":";;AACA;AACA;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,OAAO,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC;AAC9B,MAAM,OAAO,GAAG,OAAO,CAAC,mCAAmC,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,GAAG,YAAY;AACjC,IAAI,MAAM,IAAI,OAAO,CAAC,yBAAyB,EAAE,CAAC;AAClD,CAAC,CAAC;AACF,OAAO,CAAC,YAAY,GAAG,YAAY;;"}