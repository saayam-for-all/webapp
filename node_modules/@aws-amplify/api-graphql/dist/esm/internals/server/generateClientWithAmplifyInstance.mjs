import { addSchemaToClientWithInstance } from '@aws-amplify/data-schema/runtime';
import { __amplify, __authMode, __authToken, __apiKey, __endpoint, __headers, getInternals } from '../../types/index.mjs';
import { isApiGraphQLConfig } from '../utils/runtimeTypeGuards/isApiGraphQLProviderConfig.mjs';
import 'graphql';
import 'rxjs';
import '@aws-amplify/core/internals/utils';
import '@aws-amplify/api-rest';
import '@aws-amplify/api-rest/internals';
import '../../Providers/constants.mjs';
import '@aws-amplify/core';
import '../../types/PubSub.mjs';
import '../../utils/ReconnectionMonitor.mjs';
import '../../Providers/AWSWebSocketProvider/authHeaders.mjs';
import '../../utils/resolveConfig.mjs';
import '../../utils/errors/constants.mjs';
import '../../utils/errors/validation.mjs';
import { graphql, cancel, isCancelError } from '../v6.mjs';
import '../generateClient.mjs';

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @private
 *
 * Used internally by `adapter-nextjs` package.
 *
 * Creates a client that can be used to make GraphQL requests, using a provided `AmplifyClassV6`
 * compatible context object for config and auth fetching.
 *
 * @param params
 * @returns
 */
function generateClientWithAmplifyInstance(params) {
    const client = {
        [__amplify]: params.amplify,
        [__authMode]: params.authMode,
        [__authToken]: params.authToken,
        [__apiKey]: 'apiKey' in params ? params.apiKey : undefined,
        [__endpoint]: 'endpoint' in params ? params.endpoint : undefined,
        [__headers]: params.headers,
        graphql,
        cancel,
        isCancelError,
    };
    const apiGraphqlConfig = params.config?.API?.GraphQL;
    if (client[__endpoint]) {
        if (!client[__authMode]) {
            throw new Error('generateClient() requires an explicit `authMode` when `endpoint` is provided.');
        }
        if (client[__authMode] === 'apiKey' && !client[__apiKey]) {
            throw new Error("generateClient() requires an explicit `apiKey` when `endpoint` is provided and `authMode = 'apiKey'`.");
        }
    }
    if (!client[__endpoint] && isApiGraphQLConfig(apiGraphqlConfig)) {
        addSchemaToClientWithInstance(client, params, getInternals);
    }
    return client;
}

export { generateClientWithAmplifyInstance };
//# sourceMappingURL=generateClientWithAmplifyInstance.mjs.map
